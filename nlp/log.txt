Source path:... C:\Users\lonal23\OneDrive - PA Consulting Group\4 - Training\nlp\nlp_toolkit.py
Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x0000023AC48B3940>
Starting var:.. data =    person  good_week                            ..., bad_week}  7   {pretty, cat, love, good_week}  
Starting var:.. node_column = 'keyword_rating'
Starting var:.. attributes = {'comment': 'Customer Comments'}
Starting var:.. nlp_object = <spacy.lang.en.English object at 0x0000023ACEA2AFA0>
Starting var:.. args = ()
Starting var:.. kwargs = {}
Starting var:.. __class__ = <class 'nlp_toolkit.KeywordGraph'>
19:27:20.589855 call       515     def __init__(self,data,node_column,attributes:dict, nlp_object = None, *args, **kwargs):
19:27:20.611825 line       516         super().__init__(*args, **kwargs)
19:27:20.623818 line       517         self.data = data
19:27:20.630818 line       518         self.node_column = node_column
19:27:20.640818 line       519         self.attributes = attributes
19:27:20.647816 line       520         self.build_graph()
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x0000023AC48B3940>
    19:27:20.654817 call       564     def build_graph(self):
    19:27:20.655817 line       567         self.keyword_counts = self._keyword_counts() #get keyword counts of keyword : count
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x0000023AC48B3940>
        19:27:20.656818 call       529     def _keyword_counts(self):
        19:27:20.658818 line       531         self.data[self.node_column] = self.data[self.node_column].apply(set)
        19:27:20.659820 line       532         def initialise_keyword_di(ser):
        New var:....... initialise_keyword_di = <function KeywordGraph._keyword_counts.<locals>.initialise_keyword_di at 0x0000023AD9F93430>
        19:27:20.660856 line       541         def update_keyword_dict(keyword_d, set_of_keywords): #updates value in dictionary
        New var:....... update_keyword_dict = <function KeywordGraph._keyword_counts.<locals>.update_keyword_dict at 0x0000023AD9F933A0>
        19:27:20.661818 line       546         keyword_d = initialise_keyword_di(self.data[self.node_column])
        New var:....... keyword_d = {'amazing': 0, 'great': 0, 'bad_week': 0, 'wolf'...ntastic': 0, 'love': 0, 'dave': 0, 'sandwich': 0}
        19:27:20.663818 line       547         for keyword_set in self.data[self.node_column]:
        New var:....... keyword_set = {'good_week', 'like', 'dog'}
        19:27:20.665819 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        19:27:20.666861 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'fantastic', 'wolf', 'good_week'}
        19:27:20.667820 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'amazing': 0, 'great': 0, 'bad_week': 0, 'wolf'...ntastic': 1, 'love': 0, 'dave': 0, 'sandwich': 0}
        19:27:20.669822 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'great', 'cat', 'good_week'}
        19:27:20.671821 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'amazing': 0, 'great': 1, 'bad_week': 0, 'wolf'...ntastic': 1, 'love': 0, 'dave': 0, 'sandwich': 0}
        19:27:20.673818 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'amazing', 'good_week', 'feline'}
        19:27:20.675819 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'amazing': 1, 'great': 1, 'bad_week': 0, 'wolf'...ntastic': 1, 'love': 0, 'dave': 0, 'sandwich': 0}
        19:27:20.677817 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'great', 'not', 'bad_week', 'food'}
        19:27:20.679818 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'amazing': 1, 'great': 2, 'bad_week': 1, 'wolf'...ntastic': 1, 'love': 0, 'dave': 0, 'sandwich': 0}
        19:27:20.681818 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'not', 'sandwich', 'like'}
        19:27:20.683818 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'amazing': 1, 'great': 2, 'bad_week': 2, 'wolf'...ntastic': 1, 'love': 0, 'dave': 0, 'sandwich': 1}
        19:27:20.685818 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'dave', 'drink', 'ok', 'bad_week'}
        19:27:20.693818 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'amazing': 1, 'great': 2, 'bad_week': 3, 'wolf'...ntastic': 1, 'love': 0, 'dave': 1, 'sandwich': 1}
        19:27:20.695819 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'pretty', 'cat', 'love', 'good_week'}
        19:27:20.696816 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'amazing': 1, 'great': 2, 'bad_week': 3, 'wolf'...ntastic': 1, 'love': 1, 'dave': 1, 'sandwich': 1}
        19:27:20.698822 line       547         for keyword_set in self.data[self.node_column]:
        19:27:20.699817 line       549         return keyword_d
        19:27:20.700817 return     549         return keyword_d
        Return value:.. {'amazing': 1, 'great': 2, 'bad_week': 3, 'wolf'...ntastic': 1, 'love': 1, 'dave': 1, 'sandwich': 1}
        Elapsed time: 00:00:00.044999
    19:27:20.702831 line       569         for _key in self.keyword_counts:
    New var:....... _key = 'amazing'
    19:27:20.703818 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.704819 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'great'
    19:27:20.705856 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.706819 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'bad_week'
    19:27:20.707817 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.708819 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'wolf'
    19:27:20.709817 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.710817 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'ok'
    19:27:20.711817 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.712817 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'pretty'
    19:27:20.713817 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.714819 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dog'
    19:27:20.715818 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.716817 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'like'
    19:27:20.717817 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.718818 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'good_week'
    19:27:20.719818 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.720816 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'cat'
    19:27:20.721818 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.723817 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'food'
    19:27:20.723817 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.725818 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'feline'
    19:27:20.725818 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.727817 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'drink'
    19:27:20.727817 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.728818 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'not'
    19:27:20.729817 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.730818 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'fantastic'
    19:27:20.731818 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.732818 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'love'
    19:27:20.733817 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.734817 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dave'
    19:27:20.735818 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.736816 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'sandwich'
    19:27:20.737817 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    19:27:20.738818 line       569         for _key in self.keyword_counts:
    19:27:20.739817 line       574         for _set in self.data[self.node_column]:
    New var:....... _set = {'good_week', 'like', 'dog'}
    19:27:20.740818 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    New var:....... combinations = <itertools.combinations object at 0x0000023AD9F90EF0>
    19:27:20.741817 line       576             for edge in combinations:
    New var:....... edge = ('good_week', 'like')
    19:27:20.742817 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.744818 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.744818 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'dog')
    19:27:20.745817 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.746817 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.747817 line       576             for edge in combinations:
    Modified var:.. edge = ('like', 'dog')
    19:27:20.747817 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.749817 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.749817 line       576             for edge in combinations:
    19:27:20.750817 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'fantastic', 'wolf', 'good_week'}
    19:27:20.750817 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x0000023AD9F909F0>
    19:27:20.752820 line       576             for edge in combinations:
    Modified var:.. edge = ('fantastic', 'wolf')
    19:27:20.753818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.754817 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.756817 line       576             for edge in combinations:
    Modified var:.. edge = ('fantastic', 'good_week')
    19:27:20.757817 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.758817 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.758817 line       576             for edge in combinations:
    Modified var:.. edge = ('wolf', 'good_week')
    19:27:20.759817 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.760818 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.761818 line       576             for edge in combinations:
    19:27:20.762819 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'great', 'cat', 'good_week'}
    19:27:20.762819 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x0000023AD9F90EF0>
    19:27:20.764817 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'cat')
    19:27:20.766816 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.767817 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.768819 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'good_week')
    19:27:20.769817 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.770816 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.771817 line       576             for edge in combinations:
    Modified var:.. edge = ('cat', 'good_week')
    19:27:20.772818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.773818 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.774817 line       576             for edge in combinations:
    19:27:20.774817 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'amazing', 'good_week', 'feline'}
    19:27:20.775817 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x0000023AD9F90DB0>
    19:27:20.776817 line       576             for edge in combinations:
    Modified var:.. edge = ('amazing', 'good_week')
    19:27:20.778817 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.780819 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.781820 line       576             for edge in combinations:
    Modified var:.. edge = ('amazing', 'feline')
    19:27:20.781820 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.783817 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.784818 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'feline')
    19:27:20.785817 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.786817 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.787818 line       576             for edge in combinations:
    19:27:20.788818 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'great', 'not', 'bad_week', 'food'}
    19:27:20.789818 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x0000023ACEB14CC0>
    19:27:20.793818 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'not')
    19:27:20.795821 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.796819 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.797816 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'bad_week')
    19:27:20.798817 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.800818 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.802820 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'food')
    19:27:20.803818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.804818 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.806819 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'bad_week')
    19:27:20.807822 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.808822 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.809821 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'food')
    19:27:20.810822 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.813818 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.814818 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'food')
    19:27:20.814818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.816819 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.817817 line       576             for edge in combinations:
    19:27:20.818819 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'not', 'sandwich', 'like'}
    19:27:20.819824 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x0000023AD9F909F0>
    19:27:20.821818 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'not')
    19:27:20.822818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.824821 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    New var:....... edge_count = 2
    19:27:20.825818 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    19:27:20.826819 line       581                     continue
    19:27:20.827820 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'sandwich')
    19:27:20.828818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.829819 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.830819 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'like')
    19:27:20.831819 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.832820 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.833819 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'sandwich')
    19:27:20.834819 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.836818 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.836818 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'like')
    19:27:20.837816 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.839818 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.839818 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'like')
    19:27:20.840819 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.842817 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.843818 line       576             for edge in combinations:
    19:27:20.843818 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'dave', 'drink', 'ok', 'bad_week'}
    19:27:20.844819 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x0000023ACEB14BD0>
    19:27:20.846819 line       576             for edge in combinations:
    Modified var:.. edge = ('dave', 'drink')
    19:27:20.847819 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.849819 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.849819 line       576             for edge in combinations:
    Modified var:.. edge = ('dave', 'ok')
    19:27:20.850818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.852821 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.853820 line       576             for edge in combinations:
    Modified var:.. edge = ('dave', 'bad_week')
    19:27:20.854819 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.855818 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.856818 line       576             for edge in combinations:
    Modified var:.. edge = ('drink', 'ok')
    19:27:20.856818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.858820 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.858820 line       576             for edge in combinations:
    Modified var:.. edge = ('drink', 'bad_week')
    19:27:20.859818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.861816 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.862818 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'bad_week')
    19:27:20.862818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.864818 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.865818 line       576             for edge in combinations:
    19:27:20.866819 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'pretty', 'cat', 'love', 'good_week'}
    19:27:20.867818 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x0000023AD9F90E50>
    19:27:20.869818 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'cat')
    19:27:20.870818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.872820 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.873818 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'love')
    19:27:20.873818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.875819 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.876820 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'good_week')
    19:27:20.877817 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.878817 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.879820 line       576             for edge in combinations:
    Modified var:.. edge = ('cat', 'love')
    19:27:20.880821 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.881818 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.882818 line       576             for edge in combinations:
    Modified var:.. edge = ('cat', 'good_week')
    19:27:20.883818 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.884818 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    19:27:20.885817 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    19:27:20.886818 line       581                     continue
    19:27:20.887819 line       576             for edge in combinations:
    Modified var:.. edge = ('love', 'good_week')
    19:27:20.888817 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    19:27:20.889818 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    19:27:20.890818 line       576             for edge in combinations:
    19:27:20.891816 line       574         for _set in self.data[self.node_column]:
    19:27:20.892816 line       585         for _column in self.attributes:
    New var:....... _column = 'comment'
    19:27:20.892816 line       586             self.add_graph_attribute(_column, self.attributes[_column])
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x0000023AC48B3940>
        Starting var:.. column = 'comment'
        Starting var:.. attribute_name = 'Customer Comments'
        19:27:20.894818 call       551     def add_graph_attribute(self,column,attribute_name):
        19:27:20.896818 line       552         for _index in self.data.index:
        New var:....... _index = 0
        19:27:20.897817 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        New var:....... entry = 'I really liked the dogs'
        19:27:20.899820 line       554             nodes = self.data.loc[_index,self.node_column]
        New var:....... nodes = {'good_week', 'like', 'dog'}
        19:27:20.900817 line       557             for node in nodes:
        New var:....... node = 'good_week'
        19:27:20.902818 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.904817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.904817 line       557             for node in nodes:
        Modified var:.. node = 'like'
        19:27:20.905817 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.907818 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.908819 line       557             for node in nodes:
        Modified var:.. node = 'dog'
        19:27:20.908819 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.910819 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.911817 line       557             for node in nodes:
        19:27:20.912819 line       552         for _index in self.data.index:
        Modified var:.. _index = 1
        19:27:20.913819 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'wolves were fantastic'
        19:27:20.914818 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'fantastic', 'wolf', 'good_week'}
        19:27:20.916819 line       557             for node in nodes:
        Modified var:.. node = 'fantastic'
        19:27:20.917818 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.919817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.920818 line       557             for node in nodes:
        Modified var:.. node = 'wolf'
        19:27:20.921820 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.922817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.923818 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        19:27:20.924821 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.925818 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.926818 line       557             for node in nodes:
        19:27:20.927819 line       552         for _index in self.data.index:
        Modified var:.. _index = 2
        19:27:20.928818 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'cats were great'
        19:27:20.930817 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'great', 'cat', 'good_week'}
        19:27:20.931818 line       557             for node in nodes:
        Modified var:.. node = 'great'
        19:27:20.933818 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.934819 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.935819 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        19:27:20.936821 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.937817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.938818 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        19:27:20.939817 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.940818 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.941819 line       557             for node in nodes:
        19:27:20.942817 line       552         for _index in self.data.index:
        Modified var:.. _index = 3
        19:27:20.942817 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'what amazing felines'
        19:27:20.944817 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'amazing', 'good_week', 'feline'}
        19:27:20.945819 line       557             for node in nodes:
        Modified var:.. node = 'amazing'
        19:27:20.947816 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.948817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.949817 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        19:27:20.950817 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.952817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.953818 line       557             for node in nodes:
        Modified var:.. node = 'feline'
        19:27:20.953818 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.955818 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.956818 line       557             for node in nodes:
        19:27:20.957818 line       552         for _index in self.data.index:
        Modified var:.. _index = 4
        19:27:20.958817 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'the food was not great'
        19:27:20.959820 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'great', 'not', 'bad_week', 'food'}
        19:27:20.961817 line       557             for node in nodes:
        Modified var:.. node = 'great'
        19:27:20.962816 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.964819 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.964819 line       557             for node in nodes:
        Modified var:.. node = 'not'
        19:27:20.965819 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.966817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.967817 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        19:27:20.968818 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.970817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.971817 line       557             for node in nodes:
        Modified var:.. node = 'food'
        19:27:20.972818 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.973817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.974817 line       557             for node in nodes:
        19:27:20.974817 line       552         for _index in self.data.index:
        Modified var:.. _index = 5
        19:27:20.975818 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I didn't like the sandwiches"
        19:27:20.977818 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'not', 'sandwich', 'like'}
        19:27:20.978817 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        19:27:20.980817 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.982819 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.982819 line       557             for node in nodes:
        Modified var:.. node = 'not'
        19:27:20.983820 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.985818 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.986819 line       557             for node in nodes:
        Modified var:.. node = 'sandwich'
        19:27:20.986819 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.988818 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.989818 line       557             for node in nodes:
        Modified var:.. node = 'like'
        19:27:20.989818 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:20.991817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:20.992816 line       557             for node in nodes:
        19:27:20.993817 line       552         for _index in self.data.index:
        Modified var:.. _index = 6
        19:27:20.994819 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'Dave said drinks were OK'
        19:27:20.995819 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'dave', 'drink', 'ok', 'bad_week'}
        19:27:20.997818 line       557             for node in nodes:
        Modified var:.. node = 'dave'
        19:27:20.998817 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:21.000818 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:21.001818 line       557             for node in nodes:
        Modified var:.. node = 'drink'
        19:27:21.001818 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:21.003817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:21.003817 line       557             for node in nodes:
        Modified var:.. node = 'ok'
        19:27:21.004816 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:21.005817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:21.006818 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        19:27:21.007816 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:21.008817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:21.009817 line       557             for node in nodes:
        19:27:21.009817 line       552         for _index in self.data.index:
        Modified var:.. _index = 7
        19:27:21.010820 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I saw a few cats when I was there and that was pretty amazing, I do love cats that's why!"
        19:27:21.012816 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'pretty', 'cat', 'love', 'good_week'}
        19:27:21.013817 line       557             for node in nodes:
        Modified var:.. node = 'pretty'
        19:27:21.014817 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:21.016819 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:21.016819 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        19:27:21.017816 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:21.019817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:21.019817 line       557             for node in nodes:
        Modified var:.. node = 'love'
        19:27:21.020817 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:21.021818 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:21.022816 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        19:27:21.023817 line       558                 if attribute_name == self.nodes[node]: # there is already another entry here in this attribute
        19:27:21.024817 line       562                     self.nodes[node][attribute_name] = [entry]
        19:27:21.025817 line       557             for node in nodes:
        19:27:21.026817 line       552         for _index in self.data.index:
        19:27:21.026817 return     552         for _index in self.data.index:
        Return value:.. None
        Elapsed time: 00:00:00.133998
    19:27:21.029816 line       585         for _column in self.attributes:
    19:27:21.029816 return     585         for _column in self.attributes:
    Return value:.. None
    Elapsed time: 00:00:00.377001
19:27:21.031818 line       521         if nlp_object != None:
19:27:21.046816 line       522             self.add_spacy_language_model(nlp_object)
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x0000023AC48B3940>
    Starting var:.. nlp = <spacy.lang.en.English object at 0x0000023ACEA2AFA0>
    19:27:21.060816 call       526     def add_spacy_language_model(self,nlp):
    19:27:21.061817 line       527         self.nlp_object = nlp
    19:27:21.062817 return     527         self.nlp_object = nlp
    Return value:.. None
    Elapsed time: 00:00:00.003000
19:27:21.064817 return     522             self.add_spacy_language_model(nlp_object)
Return value:.. None
Elapsed time: 00:00:00.483961
Source path:... C:\Users\lonal23\Downloads\nlp\nlp_toolkit.py
Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x00000278223ECDF0>
Starting var:.. data =    person  good_week  \0  family          1   1 ... 7   good_week   {good_week, pretty, love, cat}  
Starting var:.. node_column = 'keyword_rating'
Starting var:.. attributes = {'comment': 'Customer Comments'}
Starting var:.. nlp_object = <spacy.lang.en.English object at 0x0000027868840B50>
Starting var:.. args = ()
Starting var:.. kwargs = {}
Starting var:.. __class__ = <class 'nlp_toolkit.KeywordGraph'>
12:30:37.432777 call       515     def __init__(self,data,node_column,attributes:dict, nlp_object = None, *args, **kwargs):
12:30:37.477777 line       516         super().__init__(*args, **kwargs)
12:30:37.486775 line       517         self.data = data
12:30:37.494774 line       518         self.node_column = node_column
12:30:37.507776 line       519         self.attributes = attributes
12:30:37.523776 line       520         self.build_graph()
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x00000278223ECDF0>
    12:30:37.533774 call       564     def build_graph(self):
    12:30:37.535777 line       567         self.keyword_counts = self._keyword_counts() #get keyword counts of keyword : count
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x00000278223ECDF0>
        12:30:37.535777 call       529     def _keyword_counts(self):
        12:30:37.537776 line       531         self.data[self.node_column] = self.data[self.node_column].apply(set)
        12:30:37.538778 line       532         def initialise_keyword_di(ser):
        New var:....... initialise_keyword_di = <function KeywordGraph._keyword_counts.<locals>.initialise_keyword_di at 0x000002781D920790>
        12:30:37.539776 line       541         def update_keyword_dict(keyword_d, set_of_keywords): #updates value in dictionary
        New var:....... update_keyword_dict = <function KeywordGraph._keyword_counts.<locals>.update_keyword_dict at 0x000002781D920700>
        12:30:37.541776 line       546         keyword_d = initialise_keyword_di(self.data[self.node_column])
        New var:....... keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 0, '...retty': 0, 'fantastic': 0, 'dave': 0, 'great': 0}
        12:30:37.543776 line       547         for keyword_set in self.data[self.node_column]:
        New var:....... keyword_set = {'good_week', 'dog', 'like'}
        12:30:37.544775 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 1, '...retty': 0, 'fantastic': 0, 'dave': 0, 'great': 0}
        12:30:37.546778 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'fantastic', 'wolf'}
        12:30:37.547776 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 0, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 0}
        12:30:37.548776 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'great', 'cat'}
        12:30:37.550778 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 1}
        12:30:37.552776 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'amazing', 'feline'}
        12:30:37.554778 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        12:30:37.556778 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'not', 'bad_week', 'great', 'food'}
        12:30:37.557778 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 2}
        12:30:37.558778 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'sandwich', 'like', 'not'}
        12:30:37.560777 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 2}
        12:30:37.561778 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'ok', 'drink', 'dave'}
        12:30:37.563778 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 1, 'great': 2}
        12:30:37.564776 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'pretty', 'love', 'cat'}
        12:30:37.566776 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...retty': 1, 'fantastic': 1, 'dave': 1, 'great': 2}
        12:30:37.568775 line       547         for keyword_set in self.data[self.node_column]:
        12:30:37.569777 line       549         return keyword_d
        12:30:37.570778 return     549         return keyword_d
        Return value:.. {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...retty': 1, 'fantastic': 1, 'dave': 1, 'great': 2}
        Elapsed time: 00:00:00.037001
    12:30:37.573776 line       569         for _key in self.keyword_counts:
    New var:....... _key = 'sandwich'
    12:30:37.574774 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.576776 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'wolf'
    12:30:37.577777 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.578777 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'cat'
    12:30:37.579777 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.581775 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dog'
    12:30:37.582776 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.583777 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'like'
    12:30:37.584776 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.585777 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'not'
    12:30:37.586776 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.587776 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'amazing'
    12:30:37.588776 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.590776 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'bad_week'
    12:30:37.590776 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.592777 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'drink'
    12:30:37.593776 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.594776 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'love'
    12:30:37.595775 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.596777 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'feline'
    12:30:37.597775 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.598775 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'food'
    12:30:37.598775 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.600774 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'good_week'
    12:30:37.601775 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.602776 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'ok'
    12:30:37.602776 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.603776 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'pretty'
    12:30:37.604776 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.605777 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'fantastic'
    12:30:37.606776 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.607776 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dave'
    12:30:37.607776 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.608776 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'great'
    12:30:37.609778 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:37.610775 line       569         for _key in self.keyword_counts:
    12:30:37.610775 line       574         for _set in self.data[self.node_column]:
    New var:....... _set = {'good_week', 'dog', 'like'}
    12:30:37.611776 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    New var:....... combinations = <itertools.combinations object at 0x000002781D947360>
    12:30:37.612780 line       576             for edge in combinations:
    New var:....... edge = ('good_week', 'dog')
    12:30:37.613778 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.614777 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.615778 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'like')
    12:30:37.615778 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.616776 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.617777 line       576             for edge in combinations:
    Modified var:.. edge = ('dog', 'like')
    12:30:37.618775 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.619778 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.619778 line       576             for edge in combinations:
    12:30:37.620776 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'fantastic', 'wolf'}
    12:30:37.620776 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D92CEF0>
    12:30:37.621775 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'fantastic')
    12:30:37.622779 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.623777 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.624778 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'wolf')
    12:30:37.625777 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.626775 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.626775 line       576             for edge in combinations:
    Modified var:.. edge = ('fantastic', 'wolf')
    12:30:37.627776 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.628775 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.629776 line       576             for edge in combinations:
    12:30:37.629776 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'great', 'cat'}
    12:30:37.630778 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D92CEA0>
    12:30:37.631777 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'great')
    12:30:37.632776 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.633775 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.634775 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'cat')
    12:30:37.635774 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.636776 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.637775 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'cat')
    12:30:37.637775 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.639777 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.639777 line       576             for edge in combinations:
    12:30:37.640776 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'amazing', 'feline'}
    12:30:37.640776 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D92CEF0>
    12:30:37.642776 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'amazing')
    12:30:37.643775 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.644775 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.644775 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'feline')
    12:30:37.645776 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.646775 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.647779 line       576             for edge in combinations:
    Modified var:.. edge = ('amazing', 'feline')
    12:30:37.648776 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.649776 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.650776 line       576             for edge in combinations:
    12:30:37.650776 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'not', 'bad_week', 'great', 'food'}
    12:30:37.651776 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D827D60>
    12:30:37.652778 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'bad_week')
    12:30:37.653775 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.654776 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.655775 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'great')
    12:30:37.655775 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.656776 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.657775 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'food')
    12:30:37.658776 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.659777 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.660778 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'great')
    12:30:37.660778 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.662779 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.663778 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'food')
    12:30:37.664777 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.665777 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.666777 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'food')
    12:30:37.667777 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.675779 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.676776 line       576             for edge in combinations:
    12:30:37.676776 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'sandwich', 'like', 'not'}
    12:30:37.677778 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D92CE50>
    12:30:37.679776 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'sandwich')
    12:30:37.681776 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.683776 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.684778 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'like')
    12:30:37.685778 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.686778 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.687778 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'not')
    12:30:37.688777 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.690777 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    New var:....... edge_count = 2
    12:30:37.691777 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    12:30:37.693776 line       581                     continue
    12:30:37.694778 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'like')
    12:30:37.695776 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.697777 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.699776 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'not')
    12:30:37.700777 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.701776 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.702777 line       576             for edge in combinations:
    Modified var:.. edge = ('like', 'not')
    12:30:37.703776 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.705776 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.706777 line       576             for edge in combinations:
    12:30:37.707775 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'ok', 'drink', 'dave'}
    12:30:37.708778 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D92CEF0>
    12:30:37.709776 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'ok')
    12:30:37.711778 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.713778 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.714777 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'drink')
    12:30:37.718776 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.720776 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.720776 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'dave')
    12:30:37.721777 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.723777 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.724777 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'drink')
    12:30:37.725778 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.727776 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.727776 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'dave')
    12:30:37.728776 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.730777 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.731775 line       576             for edge in combinations:
    Modified var:.. edge = ('drink', 'dave')
    12:30:37.731775 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.733775 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.734776 line       576             for edge in combinations:
    12:30:37.735775 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'pretty', 'love', 'cat'}
    12:30:37.736775 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D92CE00>
    12:30:37.737776 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'pretty')
    12:30:37.739777 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.740778 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.741778 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'love')
    12:30:37.742777 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.743777 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.744779 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'cat')
    12:30:37.745778 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.747777 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    12:30:37.748778 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    12:30:37.749776 line       581                     continue
    12:30:37.750777 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'love')
    12:30:37.751778 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.752776 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.753776 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'cat')
    12:30:37.754776 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.756777 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.757777 line       576             for edge in combinations:
    Modified var:.. edge = ('love', 'cat')
    12:30:37.758778 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:37.760779 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:37.761777 line       576             for edge in combinations:
    12:30:37.762777 line       574         for _set in self.data[self.node_column]:
    12:30:37.763777 line       585         for _column in self.attributes:
    New var:....... _column = 'comment'
    12:30:37.764775 line       586             self.add_graph_attribute(_column, self.attributes[_column])
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x00000278223ECDF0>
        Starting var:.. column = 'comment'
        Starting var:.. attribute_name = 'Customer Comments'
        12:30:37.766777 call       551     def add_graph_attribute(self,column,attribute_name):
        12:30:37.769775 line       552         for _index in self.data.index:
        New var:....... _index = 0
        12:30:37.770776 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        New var:....... entry = 'I really liked the dogs'
        12:30:37.772777 line       554             nodes = self.data.loc[_index,self.node_column]
        New var:....... nodes = {'good_week', 'dog', 'like'}
        12:30:37.774778 line       557             for node in nodes:
        New var:....... node = 'good_week'
        12:30:37.776777 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.778776 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.779777 line       557             for node in nodes:
        Modified var:.. node = 'dog'
        12:30:37.780782 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.782776 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.783778 line       557             for node in nodes:
        Modified var:.. node = 'like'
        12:30:37.784778 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.786776 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.786776 line       557             for node in nodes:
        12:30:37.787778 line       552         for _index in self.data.index:
        Modified var:.. _index = 1
        12:30:37.788776 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'wolves were fantastic'
        12:30:37.790776 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'fantastic', 'wolf'}
        12:30:37.792776 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:30:37.794776 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.795777 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:37.796778 line       557             for node in nodes:
        Modified var:.. node = 'fantastic'
        12:30:37.797776 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.798778 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.799778 line       557             for node in nodes:
        Modified var:.. node = 'wolf'
        12:30:37.800779 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.802779 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.802779 line       557             for node in nodes:
        12:30:37.803778 line       552         for _index in self.data.index:
        Modified var:.. _index = 2
        12:30:37.804777 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'cats were great'
        12:30:37.806778 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'great', 'cat'}
        12:30:37.807779 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:30:37.809779 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.810778 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:37.811778 line       557             for node in nodes:
        Modified var:.. node = 'great'
        12:30:37.812777 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.814776 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.814776 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        12:30:37.815777 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.817776 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.818775 line       557             for node in nodes:
        12:30:37.818775 line       552         for _index in self.data.index:
        Modified var:.. _index = 3
        12:30:37.819777 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'what amazing felines'
        12:30:37.821776 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'amazing', 'feline'}
        12:30:37.823777 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:30:37.824776 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.826777 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:37.826777 line       557             for node in nodes:
        Modified var:.. node = 'amazing'
        12:30:37.827778 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.829778 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.829778 line       557             for node in nodes:
        Modified var:.. node = 'feline'
        12:30:37.830777 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.832777 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.833779 line       557             for node in nodes:
        12:30:37.833779 line       552         for _index in self.data.index:
        Modified var:.. _index = 4
        12:30:37.834777 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'the food was not great'
        12:30:37.835774 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'not', 'bad_week', 'great', 'food'}
        12:30:37.837780 line       557             for node in nodes:
        Modified var:.. node = 'not'
        12:30:37.838779 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.840778 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.841775 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:30:37.841775 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.843778 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.844778 line       557             for node in nodes:
        Modified var:.. node = 'great'
        12:30:37.844778 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.846778 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:37.847779 line       557             for node in nodes:
        Modified var:.. node = 'food'
        12:30:37.847779 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.849778 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.850777 line       557             for node in nodes:
        12:30:37.851779 line       552         for _index in self.data.index:
        Modified var:.. _index = 5
        12:30:37.851779 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I didn't like the sandwiches"
        12:30:37.853778 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'sandwich', 'like', 'not'}
        12:30:37.855777 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:30:37.856776 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.858776 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:37.859776 line       557             for node in nodes:
        Modified var:.. node = 'sandwich'
        12:30:37.859776 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.861776 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.862776 line       557             for node in nodes:
        Modified var:.. node = 'like'
        12:30:37.863776 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.864778 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:37.865776 line       557             for node in nodes:
        Modified var:.. node = 'not'
        12:30:37.866776 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.867776 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:37.868777 line       557             for node in nodes:
        12:30:37.869776 line       552         for _index in self.data.index:
        Modified var:.. _index = 6
        12:30:37.870778 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'Dave said drinks were OK'
        12:30:37.872780 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'ok', 'drink', 'dave'}
        12:30:37.874779 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:30:37.875779 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.877776 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:37.877776 line       557             for node in nodes:
        Modified var:.. node = 'ok'
        12:30:37.878779 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.880778 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.881777 line       557             for node in nodes:
        Modified var:.. node = 'drink'
        12:30:37.881777 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.883777 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.884777 line       557             for node in nodes:
        Modified var:.. node = 'dave'
        12:30:37.885776 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.886777 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.887777 line       557             for node in nodes:
        12:30:37.888775 line       552         for _index in self.data.index:
        Modified var:.. _index = 7
        12:30:37.888775 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I saw a few cats when I was there and that was pretty amazing, I do love cats that's why!"
        12:30:37.890776 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'pretty', 'love', 'cat'}
        12:30:37.892776 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:30:37.893776 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.894775 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:37.895779 line       557             for node in nodes:
        Modified var:.. node = 'pretty'
        12:30:37.896778 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.898776 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.898776 line       557             for node in nodes:
        Modified var:.. node = 'love'
        12:30:37.899777 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.901777 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:37.902776 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        12:30:37.903776 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:37.904776 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:37.905776 line       557             for node in nodes:
        12:30:37.906776 line       552         for _index in self.data.index:
        12:30:37.907776 return     552         for _index in self.data.index:
        Return value:.. None
        Elapsed time: 00:00:00.142001
    12:30:37.909776 line       585         for _column in self.attributes:
    12:30:37.910778 return     585         for _column in self.attributes:
    Return value:.. None
    Elapsed time: 00:00:00.378001
12:30:37.912777 line       521         if nlp_object != None:
12:30:37.927777 line       522             self.add_spacy_language_model(nlp_object)
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x00000278223ECDF0>
    Starting var:.. nlp = <spacy.lang.en.English object at 0x0000027868840B50>
    12:30:37.945775 call       526     def add_spacy_language_model(self,nlp):
    12:30:37.947775 line       527         self.nlp_object = nlp
    12:30:37.948777 return     527         self.nlp_object = nlp
    Return value:.. None
    Elapsed time: 00:00:00.005003
12:30:37.951776 return     522             self.add_spacy_language_model(nlp_object)
Return value:.. None
Elapsed time: 00:00:00.536001
Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781A133C10>
Starting var:.. data =    person  good_week  \0  family          1   1 ... 7   good_week   {good_week, pretty, love, cat}  
Starting var:.. node_column = 'keyword_rating'
Starting var:.. attributes = {'comment': 'Customer Comments'}
Starting var:.. nlp_object = <spacy.lang.en.English object at 0x0000027868840B50>
Starting var:.. args = ()
Starting var:.. kwargs = {}
Starting var:.. __class__ = <class 'nlp_toolkit.KeywordGraph'>
12:30:50.992312 call       515     def __init__(self,data,node_column,attributes:dict, nlp_object = None, *args, **kwargs):
12:30:51.010313 line       516         super().__init__(*args, **kwargs)
12:30:51.022316 line       517         self.data = data
12:30:51.032316 line       518         self.node_column = node_column
12:30:51.046315 line       519         self.attributes = attributes
12:30:51.060317 line       520         self.build_graph()
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781A133C10>
    12:30:51.074314 call       564     def build_graph(self):
    12:30:51.076313 line       567         self.keyword_counts = self._keyword_counts() #get keyword counts of keyword : count
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781A133C10>
        12:30:51.076313 call       529     def _keyword_counts(self):
        12:30:51.078314 line       531         self.data[self.node_column] = self.data[self.node_column].apply(set)
        12:30:51.079313 line       532         def initialise_keyword_di(ser):
        New var:....... initialise_keyword_di = <function KeywordGraph._keyword_counts.<locals>.initialise_keyword_di at 0x000002781A2631F0>
        12:30:51.080312 line       541         def update_keyword_dict(keyword_d, set_of_keywords): #updates value in dictionary
        New var:....... update_keyword_dict = <function KeywordGraph._keyword_counts.<locals>.update_keyword_dict at 0x000002781A318CA0>
        12:30:51.081316 line       546         keyword_d = initialise_keyword_di(self.data[self.node_column])
        New var:....... keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 0, '...retty': 0, 'fantastic': 0, 'dave': 0, 'great': 0}
        12:30:51.084321 line       547         for keyword_set in self.data[self.node_column]:
        New var:....... keyword_set = {'good_week', 'dog', 'like'}
        12:30:51.086318 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 1, '...retty': 0, 'fantastic': 0, 'dave': 0, 'great': 0}
        12:30:51.087313 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'fantastic', 'wolf'}
        12:30:51.088314 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 0, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 0}
        12:30:51.090313 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'great', 'cat'}
        12:30:51.091314 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 1}
        12:30:51.092314 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'amazing', 'feline'}
        12:30:51.093313 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        12:30:51.094313 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'not', 'bad_week', 'great', 'food'}
        12:30:51.095314 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 2}
        12:30:51.096315 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'sandwich', 'like', 'not'}
        12:30:51.097313 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 2}
        12:30:51.098313 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'ok', 'drink', 'dave'}
        12:30:51.100314 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 1, 'great': 2}
        12:30:51.102313 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'pretty', 'love', 'cat'}
        12:30:51.103313 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...retty': 1, 'fantastic': 1, 'dave': 1, 'great': 2}
        12:30:51.105313 line       547         for keyword_set in self.data[self.node_column]:
        12:30:51.106315 line       549         return keyword_d
        12:30:51.106315 return     549         return keyword_d
        Return value:.. {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...retty': 1, 'fantastic': 1, 'dave': 1, 'great': 2}
        Elapsed time: 00:00:00.031002
    12:30:51.108315 line       569         for _key in self.keyword_counts:
    New var:....... _key = 'sandwich'
    12:30:51.109313 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.110314 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'wolf'
    12:30:51.111314 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.113314 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'cat'
    12:30:51.113314 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.115314 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dog'
    12:30:51.116313 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.117314 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'like'
    12:30:51.118313 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.120313 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'not'
    12:30:51.121313 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.122312 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'amazing'
    12:30:51.123313 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.124313 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'bad_week'
    12:30:51.125314 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.126312 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'drink'
    12:30:51.127312 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.128312 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'love'
    12:30:51.129313 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.131313 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'feline'
    12:30:51.131313 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.132312 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'food'
    12:30:51.133313 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.135312 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'good_week'
    12:30:51.135312 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.137313 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'ok'
    12:30:51.137313 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.139312 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'pretty'
    12:30:51.139312 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.140314 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'fantastic'
    12:30:51.141313 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.143312 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dave'
    12:30:51.143312 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.145315 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'great'
    12:30:51.146316 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:51.147315 line       569         for _key in self.keyword_counts:
    12:30:51.148315 line       574         for _set in self.data[self.node_column]:
    New var:....... _set = {'good_week', 'dog', 'like'}
    12:30:51.149313 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    New var:....... combinations = <itertools.combinations object at 0x000002781D9F9F90>
    12:30:51.151315 line       576             for edge in combinations:
    New var:....... edge = ('good_week', 'dog')
    12:30:51.152313 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.154312 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.155313 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'like')
    12:30:51.156312 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.157311 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.158312 line       576             for edge in combinations:
    Modified var:.. edge = ('dog', 'like')
    12:30:51.159313 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.160313 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.161313 line       576             for edge in combinations:
    12:30:51.162314 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'fantastic', 'wolf'}
    12:30:51.163313 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D9F9F40>
    12:30:51.165313 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'fantastic')
    12:30:51.166313 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.168312 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.169312 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'wolf')
    12:30:51.169312 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.171313 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.172312 line       576             for edge in combinations:
    Modified var:.. edge = ('fantastic', 'wolf')
    12:30:51.172312 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.174314 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.175312 line       576             for edge in combinations:
    12:30:51.175312 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'great', 'cat'}
    12:30:51.176312 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D833270>
    12:30:51.177315 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'great')
    12:30:51.179312 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.180312 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.180312 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'cat')
    12:30:51.181314 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.183314 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.184315 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'cat')
    12:30:51.185315 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.187313 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.188314 line       576             for edge in combinations:
    12:30:51.189314 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'amazing', 'feline'}
    12:30:51.190314 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D9F9F40>
    12:30:51.191314 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'amazing')
    12:30:51.193314 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.195314 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.195314 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'feline')
    12:30:51.196313 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.198313 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.199313 line       576             for edge in combinations:
    Modified var:.. edge = ('amazing', 'feline')
    12:30:51.200314 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.201316 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.202314 line       576             for edge in combinations:
    12:30:51.203314 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'not', 'bad_week', 'great', 'food'}
    12:30:51.204316 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D9F9D60>
    12:30:51.205316 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'bad_week')
    12:30:51.207316 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.208313 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.209314 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'great')
    12:30:51.210315 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.212314 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.213315 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'food')
    12:30:51.214313 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.216312 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.217314 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'great')
    12:30:51.218315 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.220315 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.220315 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'food')
    12:30:51.221314 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.223313 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.224314 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'food')
    12:30:51.225313 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.226315 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.227314 line       576             for edge in combinations:
    12:30:51.228313 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'sandwich', 'like', 'not'}
    12:30:51.229314 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D833270>
    12:30:51.231313 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'sandwich')
    12:30:51.233313 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.234315 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.235315 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'like')
    12:30:51.236312 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.238315 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.239313 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'not')
    12:30:51.240313 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.241313 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    New var:....... edge_count = 2
    12:30:51.242315 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    12:30:51.244315 line       581                     continue
    12:30:51.245313 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'like')
    12:30:51.245313 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.247313 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.248314 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'not')
    12:30:51.249315 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.250313 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.251313 line       576             for edge in combinations:
    Modified var:.. edge = ('like', 'not')
    12:30:51.252314 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.254314 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.254314 line       576             for edge in combinations:
    12:30:51.255313 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'ok', 'drink', 'dave'}
    12:30:51.256312 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D950130>
    12:30:51.257312 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'ok')
    12:30:51.259313 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.260314 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.261313 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'drink')
    12:30:51.261313 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.263314 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.263314 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'dave')
    12:30:51.264316 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.266316 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.267317 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'drink')
    12:30:51.268318 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.269313 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.270314 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'dave')
    12:30:51.271314 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.272313 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.273315 line       576             for edge in combinations:
    Modified var:.. edge = ('drink', 'dave')
    12:30:51.274314 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.275315 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.276316 line       576             for edge in combinations:
    12:30:51.277315 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'pretty', 'love', 'cat'}
    12:30:51.277315 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D9F9F90>
    12:30:51.279314 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'pretty')
    12:30:51.280314 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.282314 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.282314 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'love')
    12:30:51.283317 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.285312 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.286312 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'cat')
    12:30:51.286312 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.288316 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    12:30:51.289315 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    12:30:51.290314 line       581                     continue
    12:30:51.290314 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'love')
    12:30:51.291314 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.293313 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.293313 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'cat')
    12:30:51.294313 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.295314 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.296313 line       576             for edge in combinations:
    Modified var:.. edge = ('love', 'cat')
    12:30:51.297315 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:51.298312 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:51.299314 line       576             for edge in combinations:
    12:30:51.300314 line       574         for _set in self.data[self.node_column]:
    12:30:51.301315 line       585         for _column in self.attributes:
    New var:....... _column = 'comment'
    12:30:51.301315 line       586             self.add_graph_attribute(_column, self.attributes[_column])
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781A133C10>
        Starting var:.. column = 'comment'
        Starting var:.. attribute_name = 'Customer Comments'
        12:30:51.303313 call       551     def add_graph_attribute(self,column,attribute_name):
        12:30:51.305314 line       552         for _index in self.data.index:
        New var:....... _index = 0
        12:30:51.306313 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        New var:....... entry = 'I really liked the dogs'
        12:30:51.308313 line       554             nodes = self.data.loc[_index,self.node_column]
        New var:....... nodes = {'good_week', 'dog', 'like'}
        12:30:51.309314 line       557             for node in nodes:
        New var:....... node = 'good_week'
        12:30:51.310315 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.312315 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.312315 line       557             for node in nodes:
        Modified var:.. node = 'dog'
        12:30:51.313315 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.315313 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.315313 line       557             for node in nodes:
        Modified var:.. node = 'like'
        12:30:51.316314 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.318317 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.319314 line       557             for node in nodes:
        12:30:51.319314 line       552         for _index in self.data.index:
        Modified var:.. _index = 1
        12:30:51.320314 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'wolves were fantastic'
        12:30:51.321312 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'fantastic', 'wolf'}
        12:30:51.323314 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:30:51.324314 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.326313 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:51.326313 line       557             for node in nodes:
        Modified var:.. node = 'fantastic'
        12:30:51.327314 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.329314 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.329314 line       557             for node in nodes:
        Modified var:.. node = 'wolf'
        12:30:51.330314 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.331314 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.333317 line       557             for node in nodes:
        12:30:51.334385 line       552         for _index in self.data.index:
        Modified var:.. _index = 2
        12:30:51.335314 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'cats were great'
        12:30:51.336313 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'great', 'cat'}
        12:30:51.338315 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:30:51.339317 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.341317 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:51.342315 line       557             for node in nodes:
        Modified var:.. node = 'great'
        12:30:51.342315 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.343316 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.344316 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        12:30:51.345316 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.346314 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.346314 line       557             for node in nodes:
        12:30:51.347318 line       552         for _index in self.data.index:
        Modified var:.. _index = 3
        12:30:51.348317 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'what amazing felines'
        12:30:51.349315 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'amazing', 'feline'}
        12:30:51.351317 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:30:51.352315 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.353316 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:51.353316 line       557             for node in nodes:
        Modified var:.. node = 'amazing'
        12:30:51.354316 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.355316 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.356316 line       557             for node in nodes:
        Modified var:.. node = 'feline'
        12:30:51.357315 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.358314 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.358314 line       557             for node in nodes:
        12:30:51.359314 line       552         for _index in self.data.index:
        Modified var:.. _index = 4
        12:30:51.360316 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'the food was not great'
        12:30:51.361316 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'not', 'bad_week', 'great', 'food'}
        12:30:51.362314 line       557             for node in nodes:
        Modified var:.. node = 'not'
        12:30:51.364314 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.365312 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.365312 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:30:51.366316 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.367315 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.368317 line       557             for node in nodes:
        Modified var:.. node = 'great'
        12:30:51.369316 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.370316 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:51.371316 line       557             for node in nodes:
        Modified var:.. node = 'food'
        12:30:51.372315 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.373315 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.374316 line       557             for node in nodes:
        12:30:51.374316 line       552         for _index in self.data.index:
        Modified var:.. _index = 5
        12:30:51.375312 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I didn't like the sandwiches"
        12:30:51.376313 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'sandwich', 'like', 'not'}
        12:30:51.377315 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:30:51.379313 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.380315 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:51.380315 line       557             for node in nodes:
        Modified var:.. node = 'sandwich'
        12:30:51.381314 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.382313 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.383314 line       557             for node in nodes:
        Modified var:.. node = 'like'
        12:30:51.384314 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.385315 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:51.386315 line       557             for node in nodes:
        Modified var:.. node = 'not'
        12:30:51.387313 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.388314 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:51.388314 line       557             for node in nodes:
        12:30:51.389312 line       552         for _index in self.data.index:
        Modified var:.. _index = 6
        12:30:51.390312 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'Dave said drinks were OK'
        12:30:51.391314 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'ok', 'drink', 'dave'}
        12:30:51.392312 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:30:51.394312 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.395316 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:51.396314 line       557             for node in nodes:
        Modified var:.. node = 'ok'
        12:30:51.396314 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.398314 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.399312 line       557             for node in nodes:
        Modified var:.. node = 'drink'
        12:30:51.400313 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.401313 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.402315 line       557             for node in nodes:
        Modified var:.. node = 'dave'
        12:30:51.402315 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.404314 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.404314 line       557             for node in nodes:
        12:30:51.405315 line       552         for _index in self.data.index:
        Modified var:.. _index = 7
        12:30:51.406315 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I saw a few cats when I was there and that was pretty amazing, I do love cats that's why!"
        12:30:51.407315 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'pretty', 'love', 'cat'}
        12:30:51.409315 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:30:51.410315 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.411314 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:51.412313 line       557             for node in nodes:
        Modified var:.. node = 'pretty'
        12:30:51.412313 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.414315 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.414315 line       557             for node in nodes:
        Modified var:.. node = 'love'
        12:30:51.415315 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.416315 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:51.417313 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        12:30:51.417313 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:51.419314 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:51.419314 line       557             for node in nodes:
        12:30:51.420314 line       552         for _index in self.data.index:
        12:30:51.421313 return     552         for _index in self.data.index:
        Return value:.. None
        Elapsed time: 00:00:00.119001
    12:30:51.422314 line       585         for _column in self.attributes:
    12:30:51.423314 return     585         for _column in self.attributes:
    Return value:.. None
    Elapsed time: 00:00:00.349999
12:30:51.425315 line       521         if nlp_object != None:
12:30:51.434314 line       522             self.add_spacy_language_model(nlp_object)
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781A133C10>
    Starting var:.. nlp = <spacy.lang.en.English object at 0x0000027868840B50>
    12:30:51.442313 call       526     def add_spacy_language_model(self,nlp):
    12:30:51.443314 line       527         self.nlp_object = nlp
    12:30:51.444314 return     527         self.nlp_object = nlp
    Return value:.. None
    Elapsed time: 00:00:00.002999
12:30:51.445312 return     522             self.add_spacy_language_model(nlp_object)
Return value:.. None
Elapsed time: 00:00:00.463000
Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781A0FB370>
Starting var:.. data =    person  good_week  \0  family          1   1 ... 7   good_week   {good_week, pretty, love, cat}  
Starting var:.. node_column = 'keyword_rating'
Starting var:.. attributes = {'comment': 'Customer Comments'}
Starting var:.. nlp_object = <spacy.lang.en.English object at 0x0000027868840B50>
Starting var:.. args = ()
Starting var:.. kwargs = {}
Starting var:.. __class__ = <class 'nlp_toolkit.KeywordGraph'>
12:30:58.840881 call       515     def __init__(self,data,node_column,attributes:dict, nlp_object = None, *args, **kwargs):
12:30:58.865880 line       516         super().__init__(*args, **kwargs)
12:30:58.882880 line       517         self.data = data
12:30:58.899882 line       518         self.node_column = node_column
12:30:58.915879 line       519         self.attributes = attributes
12:30:58.933877 line       520         self.build_graph()
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781A0FB370>
    12:30:58.949881 call       564     def build_graph(self):
    12:30:58.951883 line       567         self.keyword_counts = self._keyword_counts() #get keyword counts of keyword : count
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781A0FB370>
        12:30:58.952882 call       529     def _keyword_counts(self):
        12:30:58.954879 line       531         self.data[self.node_column] = self.data[self.node_column].apply(set)
        12:30:58.956879 line       532         def initialise_keyword_di(ser):
        New var:....... initialise_keyword_di = <function KeywordGraph._keyword_counts.<locals>.initialise_keyword_di at 0x000002781A090160>
        12:30:58.958878 line       541         def update_keyword_dict(keyword_d, set_of_keywords): #updates value in dictionary
        New var:....... update_keyword_dict = <function KeywordGraph._keyword_counts.<locals>.update_keyword_dict at 0x000002781A317820>
        12:30:58.964881 line       546         keyword_d = initialise_keyword_di(self.data[self.node_column])
        New var:....... keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 0, '...retty': 0, 'fantastic': 0, 'dave': 0, 'great': 0}
        12:30:58.968879 line       547         for keyword_set in self.data[self.node_column]:
        New var:....... keyword_set = {'good_week', 'dog', 'like'}
        12:30:58.970880 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 1, '...retty': 0, 'fantastic': 0, 'dave': 0, 'great': 0}
        12:30:58.975878 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'fantastic', 'wolf'}
        12:30:58.978882 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 0, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 0}
        12:30:58.980879 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'great', 'cat'}
        12:30:58.982879 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 1}
        12:30:58.984879 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'amazing', 'feline'}
        12:30:58.986883 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        12:30:58.988883 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'not', 'bad_week', 'great', 'food'}
        12:30:58.989879 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 2}
        12:30:58.991879 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'sandwich', 'like', 'not'}
        12:30:58.993880 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 2}
        12:30:58.995881 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'ok', 'drink', 'dave'}
        12:30:58.997880 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 1, 'great': 2}
        12:30:58.999879 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'pretty', 'love', 'cat'}
        12:30:59.000879 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...retty': 1, 'fantastic': 1, 'dave': 1, 'great': 2}
        12:30:59.002878 line       547         for keyword_set in self.data[self.node_column]:
        12:30:59.004882 line       549         return keyword_d
        12:30:59.005882 return     549         return keyword_d
        Return value:.. {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...retty': 1, 'fantastic': 1, 'dave': 1, 'great': 2}
        Elapsed time: 00:00:00.055998
    12:30:59.009881 line       569         for _key in self.keyword_counts:
    New var:....... _key = 'sandwich'
    12:30:59.010880 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.012881 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'wolf'
    12:30:59.013882 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.015879 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'cat'
    12:30:59.016881 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.018880 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dog'
    12:30:59.019880 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.021879 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'like'
    12:30:59.022881 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.025878 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'not'
    12:30:59.026878 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.027879 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'amazing'
    12:30:59.028880 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.029880 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'bad_week'
    12:30:59.030879 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.031880 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'drink'
    12:30:59.032880 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.033879 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'love'
    12:30:59.033879 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.035880 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'feline'
    12:30:59.035880 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.037879 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'food'
    12:30:59.037879 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.039879 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'good_week'
    12:30:59.039879 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.040877 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'ok'
    12:30:59.041878 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.042879 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'pretty'
    12:30:59.043877 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.044879 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'fantastic'
    12:30:59.045878 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.046878 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dave'
    12:30:59.047878 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.048879 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'great'
    12:30:59.049879 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:30:59.050879 line       569         for _key in self.keyword_counts:
    12:30:59.051876 line       574         for _set in self.data[self.node_column]:
    New var:....... _set = {'good_week', 'dog', 'like'}
    12:30:59.052877 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    New var:....... combinations = <itertools.combinations object at 0x000002781EC98770>
    12:30:59.053878 line       576             for edge in combinations:
    New var:....... edge = ('good_week', 'dog')
    12:30:59.054877 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.055879 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.056878 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'like')
    12:30:59.056878 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.058879 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.059880 line       576             for edge in combinations:
    Modified var:.. edge = ('dog', 'like')
    12:30:59.059880 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.061878 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.061878 line       576             for edge in combinations:
    12:30:59.062879 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'fantastic', 'wolf'}
    12:30:59.063879 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EC932C0>
    12:30:59.064879 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'fantastic')
    12:30:59.066879 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.068880 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.068880 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'wolf')
    12:30:59.069879 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.070878 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.071880 line       576             for edge in combinations:
    Modified var:.. edge = ('fantastic', 'wolf')
    12:30:59.072879 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.074289 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.074879 line       576             for edge in combinations:
    12:30:59.074879 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'great', 'cat'}
    12:30:59.075880 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EC98770>
    12:30:59.077392 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'great')
    12:30:59.078402 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.079401 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.080401 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'cat')
    12:30:59.081404 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.082404 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.083404 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'cat')
    12:30:59.084401 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.085403 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.086401 line       576             for edge in combinations:
    12:30:59.087401 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'amazing', 'feline'}
    12:30:59.087401 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EC98680>
    12:30:59.089401 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'amazing')
    12:30:59.090402 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.091400 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.092401 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'feline')
    12:30:59.093402 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.094402 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.095401 line       576             for edge in combinations:
    Modified var:.. edge = ('amazing', 'feline')
    12:30:59.095401 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.097403 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.098402 line       576             for edge in combinations:
    12:30:59.099402 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'not', 'bad_week', 'great', 'food'}
    12:30:59.099402 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D9502C0>
    12:30:59.101402 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'bad_week')
    12:30:59.102402 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.104402 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.105403 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'great')
    12:30:59.106402 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.107402 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.108402 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'food')
    12:30:59.109405 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.111401 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.112402 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'great')
    12:30:59.112402 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.114402 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.115402 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'food')
    12:30:59.115402 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.117402 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.118402 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'food')
    12:30:59.119403 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.120403 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.121406 line       576             for edge in combinations:
    12:30:59.122403 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'sandwich', 'like', 'not'}
    12:30:59.123401 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EC98B30>
    12:30:59.124403 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'sandwich')
    12:30:59.125925 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.127921 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.127921 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'like')
    12:30:59.129457 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.130445 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.131445 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'not')
    12:30:59.132448 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.133446 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    New var:....... edge_count = 2
    12:30:59.134450 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    12:30:59.135449 line       581                     continue
    12:30:59.136449 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'like')
    12:30:59.137449 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.139450 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.140450 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'not')
    12:30:59.140450 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.142448 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.143450 line       576             for edge in combinations:
    Modified var:.. edge = ('like', 'not')
    12:30:59.144447 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.145450 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.146449 line       576             for edge in combinations:
    12:30:59.147449 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'ok', 'drink', 'dave'}
    12:30:59.147449 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D9502C0>
    12:30:59.149451 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'ok')
    12:30:59.150445 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.152449 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.153449 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'drink')
    12:30:59.154448 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.155448 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.156449 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'dave')
    12:30:59.157446 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.159445 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.160446 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'drink')
    12:30:59.160446 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.162447 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.163445 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'dave')
    12:30:59.164445 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.165446 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.166447 line       576             for edge in combinations:
    Modified var:.. edge = ('drink', 'dave')
    12:30:59.167448 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.168445 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.169445 line       576             for edge in combinations:
    12:30:59.170445 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'pretty', 'love', 'cat'}
    12:30:59.171446 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EC98680>
    12:30:59.172446 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'pretty')
    12:30:59.174445 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.175446 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.176446 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'love')
    12:30:59.177446 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.178444 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.179448 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'cat')
    12:30:59.180445 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.181446 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    12:30:59.182446 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    12:30:59.183444 line       581                     continue
    12:30:59.184445 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'love')
    12:30:59.185445 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.186447 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.187445 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'cat')
    12:30:59.187445 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.189447 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.190447 line       576             for edge in combinations:
    Modified var:.. edge = ('love', 'cat')
    12:30:59.191446 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:30:59.192448 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:30:59.193449 line       576             for edge in combinations:
    12:30:59.194448 line       574         for _set in self.data[self.node_column]:
    12:30:59.195449 line       585         for _column in self.attributes:
    New var:....... _column = 'comment'
    12:30:59.196448 line       586             self.add_graph_attribute(_column, self.attributes[_column])
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781A0FB370>
        Starting var:.. column = 'comment'
        Starting var:.. attribute_name = 'Customer Comments'
        12:30:59.197449 call       551     def add_graph_attribute(self,column,attribute_name):
        12:30:59.200448 line       552         for _index in self.data.index:
        New var:....... _index = 0
        12:30:59.201448 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        New var:....... entry = 'I really liked the dogs'
        12:30:59.202448 line       554             nodes = self.data.loc[_index,self.node_column]
        New var:....... nodes = {'good_week', 'dog', 'like'}
        12:30:59.204446 line       557             for node in nodes:
        New var:....... node = 'good_week'
        12:30:59.205447 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.206446 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.207446 line       557             for node in nodes:
        Modified var:.. node = 'dog'
        12:30:59.208445 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.209446 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.210447 line       557             for node in nodes:
        Modified var:.. node = 'like'
        12:30:59.210447 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.212446 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.213446 line       557             for node in nodes:
        12:30:59.213446 line       552         for _index in self.data.index:
        Modified var:.. _index = 1
        12:30:59.214448 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'wolves were fantastic'
        12:30:59.215445 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'fantastic', 'wolf'}
        12:30:59.216444 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:30:59.218444 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.219444 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:59.219444 line       557             for node in nodes:
        Modified var:.. node = 'fantastic'
        12:30:59.220445 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.221444 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.222444 line       557             for node in nodes:
        Modified var:.. node = 'wolf'
        12:30:59.222444 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.224447 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.224447 line       557             for node in nodes:
        12:30:59.225446 line       552         for _index in self.data.index:
        Modified var:.. _index = 2
        12:30:59.226448 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'cats were great'
        12:30:59.227445 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'great', 'cat'}
        12:30:59.228446 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:30:59.230446 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.231447 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:59.232444 line       557             for node in nodes:
        Modified var:.. node = 'great'
        12:30:59.232444 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.233445 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.234447 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        12:30:59.234447 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.235448 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.236447 line       557             for node in nodes:
        12:30:59.236447 line       552         for _index in self.data.index:
        Modified var:.. _index = 3
        12:30:59.237448 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'what amazing felines'
        12:30:59.238448 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'amazing', 'feline'}
        12:30:59.240444 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:30:59.241447 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.242447 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:59.243447 line       557             for node in nodes:
        Modified var:.. node = 'amazing'
        12:30:59.243447 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.245449 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.245449 line       557             for node in nodes:
        Modified var:.. node = 'feline'
        12:30:59.246448 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.247450 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.248448 line       557             for node in nodes:
        12:30:59.248448 line       552         for _index in self.data.index:
        Modified var:.. _index = 4
        12:30:59.249449 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'the food was not great'
        12:30:59.250448 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'not', 'bad_week', 'great', 'food'}
        12:30:59.252447 line       557             for node in nodes:
        Modified var:.. node = 'not'
        12:30:59.253447 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.254446 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.255445 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:30:59.255445 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.256445 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.257445 line       557             for node in nodes:
        Modified var:.. node = 'great'
        12:30:59.258445 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.259448 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:59.260446 line       557             for node in nodes:
        Modified var:.. node = 'food'
        12:30:59.261446 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.262445 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.262445 line       557             for node in nodes:
        12:30:59.263446 line       552         for _index in self.data.index:
        Modified var:.. _index = 5
        12:30:59.264448 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I didn't like the sandwiches"
        12:30:59.265446 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'sandwich', 'like', 'not'}
        12:30:59.266445 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:30:59.267446 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.268446 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:59.269446 line       557             for node in nodes:
        Modified var:.. node = 'sandwich'
        12:30:59.270447 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.271447 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.272446 line       557             for node in nodes:
        Modified var:.. node = 'like'
        12:30:59.272446 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.274445 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:59.274445 line       557             for node in nodes:
        Modified var:.. node = 'not'
        12:30:59.275445 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.277447 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:59.278447 line       557             for node in nodes:
        12:30:59.278447 line       552         for _index in self.data.index:
        Modified var:.. _index = 6
        12:30:59.279447 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'Dave said drinks were OK'
        12:30:59.281446 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'ok', 'drink', 'dave'}
        12:30:59.282447 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:30:59.284446 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.285446 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:59.286445 line       557             for node in nodes:
        Modified var:.. node = 'ok'
        12:30:59.287444 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.288445 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.288445 line       557             for node in nodes:
        Modified var:.. node = 'drink'
        12:30:59.289448 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.290449 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.291447 line       557             for node in nodes:
        Modified var:.. node = 'dave'
        12:30:59.292448 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.294447 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.294447 line       557             for node in nodes:
        12:30:59.295448 line       552         for _index in self.data.index:
        Modified var:.. _index = 7
        12:30:59.296448 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I saw a few cats when I was there and that was pretty amazing, I do love cats that's why!"
        12:30:59.297448 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'pretty', 'love', 'cat'}
        12:30:59.299447 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:30:59.300448 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.301448 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:59.302447 line       557             for node in nodes:
        Modified var:.. node = 'pretty'
        12:30:59.303448 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.304447 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.305449 line       557             for node in nodes:
        Modified var:.. node = 'love'
        12:30:59.306447 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.307450 line       562                     self.nodes[node][attribute_name] = [entry]
        12:30:59.308448 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        12:30:59.309449 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:30:59.310448 line       559                     self.nodes[node][attribute_name].append(entry)
        12:30:59.311446 line       557             for node in nodes:
        12:30:59.312445 line       552         for _index in self.data.index:
        12:30:59.312445 return     552         for _index in self.data.index:
        Return value:.. None
        Elapsed time: 00:00:00.116997
    12:30:59.314446 line       585         for _column in self.attributes:
    12:30:59.315445 return     585         for _column in self.attributes:
    Return value:.. None
    Elapsed time: 00:00:00.366565
12:30:59.317445 line       521         if nlp_object != None:
12:30:59.326444 line       522             self.add_spacy_language_model(nlp_object)
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781A0FB370>
    Starting var:.. nlp = <spacy.lang.en.English object at 0x0000027868840B50>
    12:30:59.337447 call       526     def add_spacy_language_model(self,nlp):
    12:30:59.339447 line       527         self.nlp_object = nlp
    12:30:59.340446 return     527         self.nlp_object = nlp
    Return value:.. None
    Elapsed time: 00:00:00.004000
12:30:59.342446 return     522             self.add_spacy_language_model(nlp_object)
Return value:.. None
Elapsed time: 00:00:00.516568
Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781DA7C100>
Starting var:.. data =    person  good_week  \0  family          1   1 ... 7   good_week   {good_week, pretty, love, cat}  
Starting var:.. node_column = 'keyword_rating'
Starting var:.. attributes = {'comment': 'Customer Comments'}
Starting var:.. nlp_object = <spacy.lang.en.English object at 0x0000027868840B50>
Starting var:.. args = ()
Starting var:.. kwargs = {}
Starting var:.. __class__ = <class 'nlp_toolkit.KeywordGraph'>
12:32:36.319025 call       515     def __init__(self,data,node_column,attributes:dict, nlp_object = None, *args, **kwargs):
12:32:36.339023 line       516         super().__init__(*args, **kwargs)
12:32:36.351027 line       517         self.data = data
12:32:36.364024 line       518         self.node_column = node_column
12:32:36.376024 line       519         self.attributes = attributes
12:32:36.386023 line       520         self.build_graph()
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781DA7C100>
    12:32:36.397022 call       564     def build_graph(self):
    12:32:36.398023 line       567         self.keyword_counts = self._keyword_counts() #get keyword counts of keyword : count
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781DA7C100>
        12:32:36.399026 call       529     def _keyword_counts(self):
        12:32:36.401025 line       531         self.data[self.node_column] = self.data[self.node_column].apply(set)
        12:32:36.405025 line       532         def initialise_keyword_di(ser):
        New var:....... initialise_keyword_di = <function KeywordGraph._keyword_counts.<locals>.initialise_keyword_di at 0x000002781A3185E0>
        12:32:36.405025 line       541         def update_keyword_dict(keyword_d, set_of_keywords): #updates value in dictionary
        New var:....... update_keyword_dict = <function KeywordGraph._keyword_counts.<locals>.update_keyword_dict at 0x000002781D920A60>
        12:32:36.406026 line       546         keyword_d = initialise_keyword_di(self.data[self.node_column])
        New var:....... keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 0, '...retty': 0, 'fantastic': 0, 'dave': 0, 'great': 0}
        12:32:36.409022 line       547         for keyword_set in self.data[self.node_column]:
        New var:....... keyword_set = {'good_week', 'dog', 'like'}
        12:32:36.410024 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 1, '...retty': 0, 'fantastic': 0, 'dave': 0, 'great': 0}
        12:32:36.411024 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'fantastic', 'wolf'}
        12:32:36.412024 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 0, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 0}
        12:32:36.413023 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'great', 'cat'}
        12:32:36.414024 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 1}
        12:32:36.415024 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'amazing', 'feline'}
        12:32:36.416024 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        12:32:36.418024 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'not', 'bad_week', 'great', 'food'}
        12:32:36.419033 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 2}
        12:32:36.421023 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'sandwich', 'like', 'not'}
        12:32:36.422028 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 2}
        12:32:36.424024 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'ok', 'drink', 'dave'}
        12:32:36.425022 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 1, 'great': 2}
        12:32:36.426034 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'pretty', 'love', 'cat'}
        12:32:36.427022 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...retty': 1, 'fantastic': 1, 'dave': 1, 'great': 2}
        12:32:36.428022 line       547         for keyword_set in self.data[self.node_column]:
        12:32:36.430023 line       549         return keyword_d
        12:32:36.430023 return     549         return keyword_d
        Return value:.. {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...retty': 1, 'fantastic': 1, 'dave': 1, 'great': 2}
        Elapsed time: 00:00:00.032998
    12:32:36.432024 line       569         for _key in self.keyword_counts:
    New var:....... _key = 'sandwich'
    12:32:36.433025 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.434024 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'wolf'
    12:32:36.435038 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.437037 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'cat'
    12:32:36.437037 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.438022 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dog'
    12:32:36.439023 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.440023 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'like'
    12:32:36.440023 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.441023 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'not'
    12:32:36.442024 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.443023 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'amazing'
    12:32:36.443023 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.445024 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'bad_week'
    12:32:36.445024 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.447024 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'drink'
    12:32:36.447024 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.451040 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'love'
    12:32:36.451040 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.453026 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'feline'
    12:32:36.454024 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.455022 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'food'
    12:32:36.456023 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.458023 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'good_week'
    12:32:36.458023 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.460022 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'ok'
    12:32:36.460022 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.462024 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'pretty'
    12:32:36.463024 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.464031 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'fantastic'
    12:32:36.465037 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.466023 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dave'
    12:32:36.467024 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.468024 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'great'
    12:32:36.469023 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:36.470024 line       569         for _key in self.keyword_counts:
    12:32:36.471022 line       574         for _set in self.data[self.node_column]:
    New var:....... _set = {'good_week', 'dog', 'like'}
    12:32:36.471022 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    New var:....... combinations = <itertools.combinations object at 0x000002781EC88F90>
    12:32:36.473023 line       576             for edge in combinations:
    New var:....... edge = ('good_week', 'dog')
    12:32:36.474023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.475024 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.476023 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'like')
    12:32:36.476023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.478023 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.478023 line       576             for edge in combinations:
    Modified var:.. edge = ('dog', 'like')
    12:32:36.479022 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.480025 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.481024 line       576             for edge in combinations:
    12:32:36.482022 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'fantastic', 'wolf'}
    12:32:36.483022 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EC984F0>
    12:32:36.484023 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'fantastic')
    12:32:36.485023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.487038 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.487038 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'wolf')
    12:32:36.488023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.489022 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.490022 line       576             for edge in combinations:
    Modified var:.. edge = ('fantastic', 'wolf')
    12:32:36.491024 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.492024 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.493024 line       576             for edge in combinations:
    12:32:36.494035 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'great', 'cat'}
    12:32:36.494035 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EC88F90>
    12:32:36.496023 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'great')
    12:32:36.497022 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.498029 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.499029 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'cat')
    12:32:36.500023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.501023 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.502024 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'cat')
    12:32:36.503022 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.504035 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.505024 line       576             for edge in combinations:
    12:32:36.506037 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'amazing', 'feline'}
    12:32:36.507023 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EC984F0>
    12:32:36.508022 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'amazing')
    12:32:36.509024 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.511023 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.511023 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'feline')
    12:32:36.512023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.513022 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.514024 line       576             for edge in combinations:
    Modified var:.. edge = ('amazing', 'feline')
    12:32:36.515024 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.516023 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.517023 line       576             for edge in combinations:
    12:32:36.518023 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'not', 'bad_week', 'great', 'food'}
    12:32:36.519023 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EC88F90>
    12:32:36.520024 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'bad_week')
    12:32:36.522025 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.523023 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.524023 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'great')
    12:32:36.524023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.526024 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.526024 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'food')
    12:32:36.527024 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.528025 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.529030 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'great')
    12:32:36.530025 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.531025 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.532023 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'food')
    12:32:36.533024 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.534027 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.535027 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'food')
    12:32:36.536030 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.537026 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.537026 line       576             for edge in combinations:
    12:32:36.538039 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'sandwich', 'like', 'not'}
    12:32:36.539026 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EC98360>
    12:32:36.540023 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'sandwich')
    12:32:36.542026 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.543024 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.544031 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'like')
    12:32:36.544031 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.546026 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.546026 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'not')
    12:32:36.547025 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.548025 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    New var:....... edge_count = 2
    12:32:36.549039 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    12:32:36.551025 line       581                     continue
    12:32:36.552023 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'like')
    12:32:36.553037 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.554027 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.555022 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'not')
    12:32:36.556023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.557024 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.558022 line       576             for edge in combinations:
    Modified var:.. edge = ('like', 'not')
    12:32:36.559023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.560023 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.561024 line       576             for edge in combinations:
    12:32:36.561024 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'ok', 'drink', 'dave'}
    12:32:36.562038 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EC984F0>
    12:32:36.563024 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'ok')
    12:32:36.565023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.566022 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.566022 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'drink')
    12:32:36.567026 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.569023 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.569023 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'dave')
    12:32:36.570024 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.571022 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.572022 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'drink')
    12:32:36.572022 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.574023 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.574023 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'dave')
    12:32:36.575023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.576023 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.577025 line       576             for edge in combinations:
    Modified var:.. edge = ('drink', 'dave')
    12:32:36.578022 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.579021 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.579021 line       576             for edge in combinations:
    12:32:36.580023 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'pretty', 'love', 'cat'}
    12:32:36.581022 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EC88F90>
    12:32:36.582025 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'pretty')
    12:32:36.583023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.585023 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.586026 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'love')
    12:32:36.586026 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.587037 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.588022 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'cat')
    12:32:36.589038 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.590022 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    12:32:36.591024 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    12:32:36.591024 line       581                     continue
    12:32:36.592025 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'love')
    12:32:36.593023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.594023 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.594023 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'cat')
    12:32:36.595027 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.596023 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.597024 line       576             for edge in combinations:
    Modified var:.. edge = ('love', 'cat')
    12:32:36.598023 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:36.599025 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:36.600023 line       576             for edge in combinations:
    12:32:36.600023 line       574         for _set in self.data[self.node_column]:
    12:32:36.601023 line       585         for _column in self.attributes:
    New var:....... _column = 'comment'
    12:32:36.602026 line       586             self.add_graph_attribute(_column, self.attributes[_column])
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781DA7C100>
        Starting var:.. column = 'comment'
        Starting var:.. attribute_name = 'Customer Comments'
        12:32:36.603025 call       551     def add_graph_attribute(self,column,attribute_name):
        12:32:36.606026 line       552         for _index in self.data.index:
        New var:....... _index = 0
        12:32:36.606026 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        New var:....... entry = 'I really liked the dogs'
        12:32:36.608024 line       554             nodes = self.data.loc[_index,self.node_column]
        New var:....... nodes = {'good_week', 'dog', 'like'}
        12:32:36.609026 line       557             for node in nodes:
        New var:....... node = 'good_week'
        12:32:36.610024 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.612026 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.612026 line       557             for node in nodes:
        Modified var:.. node = 'dog'
        12:32:36.613036 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.614024 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.615024 line       557             for node in nodes:
        Modified var:.. node = 'like'
        12:32:36.616023 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.617034 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.618032 line       557             for node in nodes:
        12:32:36.619023 line       552         for _index in self.data.index:
        Modified var:.. _index = 1
        12:32:36.620023 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'wolves were fantastic'
        12:32:36.621024 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'fantastic', 'wolf'}
        12:32:36.622023 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:32:36.623036 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.625021 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:36.625021 line       557             for node in nodes:
        Modified var:.. node = 'fantastic'
        12:32:36.626022 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.627022 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.628021 line       557             for node in nodes:
        Modified var:.. node = 'wolf'
        12:32:36.628021 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.629025 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.630029 line       557             for node in nodes:
        12:32:36.631023 line       552         for _index in self.data.index:
        Modified var:.. _index = 2
        12:32:36.631023 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'cats were great'
        12:32:36.633024 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'great', 'cat'}
        12:32:36.634024 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:32:36.636037 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.637038 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:36.638024 line       557             for node in nodes:
        Modified var:.. node = 'great'
        12:32:36.638024 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.639035 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.640023 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        12:32:36.641022 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.642025 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.643026 line       557             for node in nodes:
        12:32:36.643026 line       552         for _index in self.data.index:
        Modified var:.. _index = 3
        12:32:36.644025 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'what amazing felines'
        12:32:36.645025 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'amazing', 'feline'}
        12:32:36.646024 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:32:36.648035 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.649025 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:36.650024 line       557             for node in nodes:
        Modified var:.. node = 'amazing'
        12:32:36.650024 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.652036 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.653024 line       557             for node in nodes:
        Modified var:.. node = 'feline'
        12:32:36.654025 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.655022 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.656027 line       557             for node in nodes:
        12:32:36.657023 line       552         for _index in self.data.index:
        Modified var:.. _index = 4
        12:32:36.657023 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'the food was not great'
        12:32:36.659022 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'not', 'bad_week', 'great', 'food'}
        12:32:36.661022 line       557             for node in nodes:
        Modified var:.. node = 'not'
        12:32:36.662025 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.664025 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.665025 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:32:36.666023 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.667023 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.668024 line       557             for node in nodes:
        Modified var:.. node = 'great'
        12:32:36.669024 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.670023 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:36.671025 line       557             for node in nodes:
        Modified var:.. node = 'food'
        12:32:36.672024 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.673024 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.674021 line       557             for node in nodes:
        12:32:36.674021 line       552         for _index in self.data.index:
        Modified var:.. _index = 5
        12:32:36.675023 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I didn't like the sandwiches"
        12:32:36.676022 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'sandwich', 'like', 'not'}
        12:32:36.678022 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:32:36.679023 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.680023 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:36.681023 line       557             for node in nodes:
        Modified var:.. node = 'sandwich'
        12:32:36.681023 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.683024 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.684023 line       557             for node in nodes:
        Modified var:.. node = 'like'
        12:32:36.684023 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.686023 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:36.687025 line       557             for node in nodes:
        Modified var:.. node = 'not'
        12:32:36.687025 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.689023 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:36.689023 line       557             for node in nodes:
        12:32:36.690025 line       552         for _index in self.data.index:
        Modified var:.. _index = 6
        12:32:36.691031 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'Dave said drinks were OK'
        12:32:36.692023 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'ok', 'drink', 'dave'}
        12:32:36.693024 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:32:36.694036 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.696024 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:36.696024 line       557             for node in nodes:
        Modified var:.. node = 'ok'
        12:32:36.697024 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.698024 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.699023 line       557             for node in nodes:
        Modified var:.. node = 'drink'
        12:32:36.700023 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.701024 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.702024 line       557             for node in nodes:
        Modified var:.. node = 'dave'
        12:32:36.702024 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.704022 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.704022 line       557             for node in nodes:
        12:32:36.705022 line       552         for _index in self.data.index:
        Modified var:.. _index = 7
        12:32:36.706025 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I saw a few cats when I was there and that was pretty amazing, I do love cats that's why!"
        12:32:36.707024 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'pretty', 'love', 'cat'}
        12:32:36.708031 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:32:36.710025 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.711023 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:36.712023 line       557             for node in nodes:
        Modified var:.. node = 'pretty'
        12:32:36.713025 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.714023 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.715023 line       557             for node in nodes:
        Modified var:.. node = 'love'
        12:32:36.715023 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.716024 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:36.717037 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        12:32:36.718023 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:36.719022 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:36.720023 line       557             for node in nodes:
        12:32:36.720023 line       552         for _index in self.data.index:
        12:32:36.721024 return     552         for _index in self.data.index:
        Return value:.. None
        Elapsed time: 00:00:00.118999
    12:32:36.723024 line       585         for _column in self.attributes:
    12:32:36.724023 return     585         for _column in self.attributes:
    Return value:.. None
    Elapsed time: 00:00:00.328001
12:32:36.726022 line       521         if nlp_object != None:
12:32:36.738036 line       522             self.add_spacy_language_model(nlp_object)
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781DA7C100>
    Starting var:.. nlp = <spacy.lang.en.English object at 0x0000027868840B50>
    12:32:36.746024 call       526     def add_spacy_language_model(self,nlp):
    12:32:36.748028 line       527         self.nlp_object = nlp
    12:32:36.749023 return     527         self.nlp_object = nlp
    Return value:.. None
    Elapsed time: 00:00:00.004001
12:32:36.751026 return     522             self.add_spacy_language_model(nlp_object)
Return value:.. None
Elapsed time: 00:00:00.441009
Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781EDF1580>
Starting var:.. data =    person  good_week  \0  family          1   1 ... 7   good_week   {good_week, pretty, love, cat}  
Starting var:.. node_column = 'keyword_rating'
Starting var:.. attributes = {'comment': 'Customer Comments'}
Starting var:.. nlp_object = <spacy.lang.en.English object at 0x0000027868840B50>
Starting var:.. args = ()
Starting var:.. kwargs = {}
Starting var:.. __class__ = <class 'nlp_toolkit.KeywordGraph'>
12:32:44.149384 call       515     def __init__(self,data,node_column,attributes:dict, nlp_object = None, *args, **kwargs):
12:32:44.163384 line       516         super().__init__(*args, **kwargs)
12:32:44.174380 line       517         self.data = data
12:32:44.182382 line       518         self.node_column = node_column
12:32:44.190379 line       519         self.attributes = attributes
12:32:44.197382 line       520         self.build_graph()
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781EDF1580>
    12:32:44.205382 call       564     def build_graph(self):
    12:32:44.206381 line       567         self.keyword_counts = self._keyword_counts() #get keyword counts of keyword : count
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781EDF1580>
        12:32:44.207380 call       529     def _keyword_counts(self):
        12:32:44.208380 line       531         self.data[self.node_column] = self.data[self.node_column].apply(set)
        12:32:44.209381 line       532         def initialise_keyword_di(ser):
        New var:....... initialise_keyword_di = <function KeywordGraph._keyword_counts.<locals>.initialise_keyword_di at 0x000002781EE59EE0>
        12:32:44.210382 line       541         def update_keyword_dict(keyword_d, set_of_keywords): #updates value in dictionary
        New var:....... update_keyword_dict = <function KeywordGraph._keyword_counts.<locals>.update_keyword_dict at 0x000002781EE59F70>
        12:32:44.211382 line       546         keyword_d = initialise_keyword_di(self.data[self.node_column])
        New var:....... keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 0, '...retty': 0, 'fantastic': 0, 'dave': 0, 'great': 0}
        12:32:44.213383 line       547         for keyword_set in self.data[self.node_column]:
        New var:....... keyword_set = {'good_week', 'dog', 'like'}
        12:32:44.215381 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 1, '...retty': 0, 'fantastic': 0, 'dave': 0, 'great': 0}
        12:32:44.216380 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'fantastic', 'wolf'}
        12:32:44.217380 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 0, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 0}
        12:32:44.218381 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'great', 'cat'}
        12:32:44.219381 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 1}
        12:32:44.220379 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'amazing', 'feline'}
        12:32:44.221379 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        12:32:44.223380 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'not', 'bad_week', 'great', 'food'}
        12:32:44.223380 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 2}
        12:32:44.224381 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'sandwich', 'like', 'not'}
        12:32:44.225381 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 2}
        12:32:44.227380 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'ok', 'drink', 'dave'}
        12:32:44.228381 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 1, 'great': 2}
        12:32:44.229380 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'pretty', 'love', 'cat'}
        12:32:44.230381 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...retty': 1, 'fantastic': 1, 'dave': 1, 'great': 2}
        12:32:44.231380 line       547         for keyword_set in self.data[self.node_column]:
        12:32:44.233382 line       549         return keyword_d
        12:32:44.233382 return     549         return keyword_d
        Return value:.. {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...retty': 1, 'fantastic': 1, 'dave': 1, 'great': 2}
        Elapsed time: 00:00:00.027000
    12:32:44.235381 line       569         for _key in self.keyword_counts:
    New var:....... _key = 'sandwich'
    12:32:44.236382 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.237383 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'wolf'
    12:32:44.237383 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.238380 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'cat'
    12:32:44.239383 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.240381 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dog'
    12:32:44.241381 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.242380 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'like'
    12:32:44.242380 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.244383 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'not'
    12:32:44.244383 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.246419 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'amazing'
    12:32:44.246419 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.247380 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'bad_week'
    12:32:44.248381 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.249380 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'drink'
    12:32:44.249380 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.250380 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'love'
    12:32:44.251384 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.252380 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'feline'
    12:32:44.252380 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.253382 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'food'
    12:32:44.254383 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.255383 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'good_week'
    12:32:44.255383 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.256381 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'ok'
    12:32:44.257381 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.258381 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'pretty'
    12:32:44.258381 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.259381 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'fantastic'
    12:32:44.260387 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.261383 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dave'
    12:32:44.262381 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.263380 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'great'
    12:32:44.263380 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    12:32:44.264381 line       569         for _key in self.keyword_counts:
    12:32:44.265381 line       574         for _set in self.data[self.node_column]:
    New var:....... _set = {'good_week', 'dog', 'like'}
    12:32:44.265381 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    New var:....... combinations = <itertools.combinations object at 0x000002781D9504A0>
    12:32:44.266381 line       576             for edge in combinations:
    New var:....... edge = ('good_week', 'dog')
    12:32:44.267381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.268380 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.269381 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'like')
    12:32:44.269381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.271382 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.271382 line       576             for edge in combinations:
    Modified var:.. edge = ('dog', 'like')
    12:32:44.272381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.273380 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.273380 line       576             for edge in combinations:
    12:32:44.274380 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'fantastic', 'wolf'}
    12:32:44.274380 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EE3BE50>
    12:32:44.275381 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'fantastic')
    12:32:44.276381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.278381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.278381 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'wolf')
    12:32:44.279381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.280381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.280381 line       576             for edge in combinations:
    Modified var:.. edge = ('fantastic', 'wolf')
    12:32:44.281381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.282380 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.282380 line       576             for edge in combinations:
    12:32:44.283381 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'great', 'cat'}
    12:32:44.283381 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EE28BD0>
    12:32:44.284381 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'great')
    12:32:44.285380 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.286381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.287380 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'cat')
    12:32:44.287380 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.288381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.289380 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'cat')
    12:32:44.289380 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.290381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.291380 line       576             for edge in combinations:
    12:32:44.291380 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'amazing', 'feline'}
    12:32:44.292381 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D92CF40>
    12:32:44.293381 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'amazing')
    12:32:44.294382 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.295381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.296381 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'feline')
    12:32:44.297381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.298381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.298381 line       576             for edge in combinations:
    Modified var:.. edge = ('amazing', 'feline')
    12:32:44.299380 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.299380 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.300380 line       576             for edge in combinations:
    12:32:44.301380 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'not', 'bad_week', 'great', 'food'}
    12:32:44.301380 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EE3BE50>
    12:32:44.302381 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'bad_week')
    12:32:44.303380 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.304382 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.305382 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'great')
    12:32:44.306382 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.307382 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.308382 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'food')
    12:32:44.309382 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.310381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.311384 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'great')
    12:32:44.311384 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.312381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.313380 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'food')
    12:32:44.314382 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.315383 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.316381 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'food')
    12:32:44.316381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.317381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.318381 line       576             for edge in combinations:
    12:32:44.319381 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'sandwich', 'like', 'not'}
    12:32:44.319381 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D92CB30>
    12:32:44.321382 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'sandwich')
    12:32:44.322381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.323380 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.324383 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'like')
    12:32:44.325381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.326381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.327382 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'not')
    12:32:44.327382 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.329380 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    New var:....... edge_count = 2
    12:32:44.329380 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    12:32:44.331382 line       581                     continue
    12:32:44.331382 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'like')
    12:32:44.332385 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.333382 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.334381 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'not')
    12:32:44.334381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.335381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.336381 line       576             for edge in combinations:
    Modified var:.. edge = ('like', 'not')
    12:32:44.337380 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.338382 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.339383 line       576             for edge in combinations:
    12:32:44.340381 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'ok', 'drink', 'dave'}
    12:32:44.340381 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781EE28BD0>
    12:32:44.341381 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'ok')
    12:32:44.343381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.344385 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.345383 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'drink')
    12:32:44.346381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.347381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.348381 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'dave')
    12:32:44.348381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.350381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.350381 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'drink')
    12:32:44.351381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.352384 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.353381 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'dave')
    12:32:44.354381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.355382 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.355382 line       576             for edge in combinations:
    Modified var:.. edge = ('drink', 'dave')
    12:32:44.356381 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.357381 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.358381 line       576             for edge in combinations:
    12:32:44.358381 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'pretty', 'love', 'cat'}
    12:32:44.359382 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781D92CF40>
    12:32:44.360383 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'pretty')
    12:32:44.361384 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.363382 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.363382 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'love')
    12:32:44.364380 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.365380 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.366381 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'cat')
    12:32:44.366619 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.367382 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    12:32:44.368380 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    12:32:44.369383 line       581                     continue
    12:32:44.369894 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'love')
    12:32:44.370903 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.371906 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.371906 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'cat')
    12:32:44.372906 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.373905 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.374904 line       576             for edge in combinations:
    Modified var:.. edge = ('love', 'cat')
    12:32:44.375906 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    12:32:44.376904 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    12:32:44.377904 line       576             for edge in combinations:
    12:32:44.377904 line       574         for _set in self.data[self.node_column]:
    12:32:44.378903 line       585         for _column in self.attributes:
    New var:....... _column = 'comment'
    12:32:44.379903 line       586             self.add_graph_attribute(_column, self.attributes[_column])
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781EDF1580>
        Starting var:.. column = 'comment'
        Starting var:.. attribute_name = 'Customer Comments'
        12:32:44.380904 call       551     def add_graph_attribute(self,column,attribute_name):
        12:32:44.382904 line       552         for _index in self.data.index:
        New var:....... _index = 0
        12:32:44.383904 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        New var:....... entry = 'I really liked the dogs'
        12:32:44.384903 line       554             nodes = self.data.loc[_index,self.node_column]
        New var:....... nodes = {'good_week', 'dog', 'like'}
        12:32:44.386904 line       557             for node in nodes:
        New var:....... node = 'good_week'
        12:32:44.387903 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.388904 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.388904 line       557             for node in nodes:
        Modified var:.. node = 'dog'
        12:32:44.389906 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.391902 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.391902 line       557             for node in nodes:
        Modified var:.. node = 'like'
        12:32:44.392904 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.393905 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.394904 line       557             for node in nodes:
        12:32:44.394904 line       552         for _index in self.data.index:
        Modified var:.. _index = 1
        12:32:44.395905 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'wolves were fantastic'
        12:32:44.396905 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'fantastic', 'wolf'}
        12:32:44.398904 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:32:44.399903 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.400906 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:44.401907 line       557             for node in nodes:
        Modified var:.. node = 'fantastic'
        12:32:44.402904 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.403905 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.403905 line       557             for node in nodes:
        Modified var:.. node = 'wolf'
        12:32:44.404904 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.406904 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.406904 line       557             for node in nodes:
        12:32:44.408321 line       552         for _index in self.data.index:
        Modified var:.. _index = 2
        12:32:44.408905 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'cats were great'
        12:32:44.409903 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'great', 'cat'}
        12:32:44.411438 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:32:44.412423 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.413423 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:44.414960 line       557             for node in nodes:
        Modified var:.. node = 'great'
        12:32:44.414960 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.415943 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.416944 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        12:32:44.417942 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.418943 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.419943 line       557             for node in nodes:
        12:32:44.419943 line       552         for _index in self.data.index:
        Modified var:.. _index = 3
        12:32:44.420943 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'what amazing felines'
        12:32:44.421944 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'amazing', 'feline'}
        12:32:44.423944 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:32:44.424944 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.426943 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:44.427943 line       557             for node in nodes:
        Modified var:.. node = 'amazing'
        12:32:44.427943 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.429945 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.430943 line       557             for node in nodes:
        Modified var:.. node = 'feline'
        12:32:44.430943 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.432942 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.432942 line       557             for node in nodes:
        12:32:44.433943 line       552         for _index in self.data.index:
        Modified var:.. _index = 4
        12:32:44.434943 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'the food was not great'
        12:32:44.436944 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'not', 'bad_week', 'great', 'food'}
        12:32:44.437944 line       557             for node in nodes:
        Modified var:.. node = 'not'
        12:32:44.438943 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.440942 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.440942 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:32:44.441942 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.442943 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.443945 line       557             for node in nodes:
        Modified var:.. node = 'great'
        12:32:44.444942 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.445945 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:44.445945 line       557             for node in nodes:
        Modified var:.. node = 'food'
        12:32:44.446944 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.447942 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.448944 line       557             for node in nodes:
        12:32:44.448944 line       552         for _index in self.data.index:
        Modified var:.. _index = 5
        12:32:44.449942 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I didn't like the sandwiches"
        12:32:44.451943 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'sandwich', 'like', 'not'}
        12:32:44.452942 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:32:44.453946 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.454944 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:44.455943 line       557             for node in nodes:
        Modified var:.. node = 'sandwich'
        12:32:44.455943 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.457943 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.457943 line       557             for node in nodes:
        Modified var:.. node = 'like'
        12:32:44.458942 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.460945 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:44.460945 line       557             for node in nodes:
        Modified var:.. node = 'not'
        12:32:44.461943 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.462945 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:44.463944 line       557             for node in nodes:
        12:32:44.464942 line       552         for _index in self.data.index:
        Modified var:.. _index = 6
        12:32:44.464942 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'Dave said drinks were OK'
        12:32:44.466945 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'ok', 'drink', 'dave'}
        12:32:44.467946 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        12:32:44.468942 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.470941 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:44.470941 line       557             for node in nodes:
        Modified var:.. node = 'ok'
        12:32:44.471943 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.472943 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.473942 line       557             for node in nodes:
        Modified var:.. node = 'drink'
        12:32:44.474942 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.475943 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.475943 line       557             for node in nodes:
        Modified var:.. node = 'dave'
        12:32:44.476944 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.477943 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.478943 line       557             for node in nodes:
        12:32:44.478943 line       552         for _index in self.data.index:
        Modified var:.. _index = 7
        12:32:44.479942 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I saw a few cats when I was there and that was pretty amazing, I do love cats that's why!"
        12:32:44.480943 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'pretty', 'love', 'cat'}
        12:32:44.481941 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        12:32:44.482944 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.483943 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:44.484945 line       557             for node in nodes:
        Modified var:.. node = 'pretty'
        12:32:44.485946 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.486944 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.486944 line       557             for node in nodes:
        Modified var:.. node = 'love'
        12:32:44.487945 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.488947 line       562                     self.nodes[node][attribute_name] = [entry]
        12:32:44.489944 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        12:32:44.489944 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        12:32:44.491943 line       559                     self.nodes[node][attribute_name].append(entry)
        12:32:44.491943 line       557             for node in nodes:
        12:32:44.492945 line       552         for _index in self.data.index:
        12:32:44.492945 return     552         for _index in self.data.index:
        Return value:.. None
        Elapsed time: 00:00:00.114038
    12:32:44.494942 line       585         for _column in self.attributes:
    12:32:44.495943 return     585         for _column in self.attributes:
    Return value:.. None
    Elapsed time: 00:00:00.291561
12:32:44.497942 line       521         if nlp_object != None:
12:32:44.505941 line       522             self.add_spacy_language_model(nlp_object)
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781EDF1580>
    Starting var:.. nlp = <spacy.lang.en.English object at 0x0000027868840B50>
    12:32:44.517943 call       526     def add_spacy_language_model(self,nlp):
    12:32:44.519945 line       527         self.nlp_object = nlp
    12:32:44.520943 return     527         self.nlp_object = nlp
    Return value:.. None
    Elapsed time: 00:00:00.005001
12:32:44.522944 return     522             self.add_spacy_language_model(nlp_object)
Return value:.. None
Elapsed time: 00:00:00.388558
Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781FF83AC0>
Starting var:.. data =    person  good_week  \0  family          1   1 ... 7   good_week   {good_week, pretty, love, cat}  
Starting var:.. node_column = 'keyword_rating'
Starting var:.. attributes = {'comment': 'Customer Comments'}
Starting var:.. nlp_object = <spacy.lang.en.English object at 0x000002781EFECC70>
Starting var:.. args = ()
Starting var:.. kwargs = {}
Starting var:.. __class__ = <class 'nlp_toolkit.KeywordGraph'>
16:12:12.978245 call       515     def __init__(self,data,node_column,attributes:dict, nlp_object = None, *args, **kwargs):
16:12:13.008246 line       516         super().__init__(*args, **kwargs)
16:12:13.028254 line       517         self.data = data
16:12:13.040243 line       518         self.node_column = node_column
16:12:13.051281 line       519         self.attributes = attributes
16:12:13.059285 line       520         self.build_graph()
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781FF83AC0>
    16:12:13.067241 call       564     def build_graph(self):
    16:12:13.069241 line       567         self.keyword_counts = self._keyword_counts() #get keyword counts of keyword : count
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781FF83AC0>
        16:12:13.070241 call       529     def _keyword_counts(self):
        16:12:13.072245 line       531         self.data[self.node_column] = self.data[self.node_column].apply(set)
        16:12:13.087250 line       532         def initialise_keyword_di(ser):
        New var:....... initialise_keyword_di = <function KeywordGraph._keyword_counts.<locals>.initialise_keyword_di at 0x000002781FEACA60>
        16:12:13.088244 line       541         def update_keyword_dict(keyword_d, set_of_keywords): #updates value in dictionary
        New var:....... update_keyword_dict = <function KeywordGraph._keyword_counts.<locals>.update_keyword_dict at 0x00000278200F60D0>
        16:12:13.090248 line       546         keyword_d = initialise_keyword_di(self.data[self.node_column])
        New var:....... keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 0, '...retty': 0, 'fantastic': 0, 'dave': 0, 'great': 0}
        16:12:13.095241 line       547         for keyword_set in self.data[self.node_column]:
        New var:....... keyword_set = {'good_week', 'dog', 'like'}
        16:12:13.097241 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 1, '...retty': 0, 'fantastic': 0, 'dave': 0, 'great': 0}
        16:12:13.099240 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'fantastic', 'wolf'}
        16:12:13.100239 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 0, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 0}
        16:12:13.102242 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'great', 'cat'}
        16:12:13.105241 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 1}
        16:12:13.107241 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'amazing', 'feline'}
        16:12:13.109242 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        16:12:13.111242 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'not', 'bad_week', 'great', 'food'}
        16:12:13.111242 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 2}
        16:12:13.113242 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'sandwich', 'like', 'not'}
        16:12:13.114241 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 0, 'great': 2}
        16:12:13.116242 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'bad_week', 'ok', 'drink', 'dave'}
        16:12:13.118241 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...retty': 0, 'fantastic': 1, 'dave': 1, 'great': 2}
        16:12:13.119239 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'good_week', 'pretty', 'love', 'cat'}
        16:12:13.121238 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...retty': 1, 'fantastic': 1, 'dave': 1, 'great': 2}
        16:12:13.123239 line       547         for keyword_set in self.data[self.node_column]:
        16:12:13.125240 line       549         return keyword_d
        16:12:13.126240 return     549         return keyword_d
        Return value:.. {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...retty': 1, 'fantastic': 1, 'dave': 1, 'great': 2}
        Elapsed time: 00:00:00.056997
    16:12:13.128237 line       569         for _key in self.keyword_counts:
    New var:....... _key = 'sandwich'
    16:12:13.129240 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.132237 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'wolf'
    16:12:13.133242 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.134239 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'cat'
    16:12:13.135239 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.137239 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dog'
    16:12:13.138239 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.139241 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'like'
    16:12:13.140242 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.142241 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'not'
    16:12:13.143242 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.144238 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'amazing'
    16:12:13.145238 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.146242 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'bad_week'
    16:12:13.147240 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.149241 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'drink'
    16:12:13.166236 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.167238 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'love'
    16:12:13.168239 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.169238 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'feline'
    16:12:13.170238 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.173240 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'food'
    16:12:13.173240 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.175239 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'good_week'
    16:12:13.176254 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.177240 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'ok'
    16:12:13.178239 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.180243 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'pretty'
    16:12:13.181237 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.182238 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'fantastic'
    16:12:13.183239 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.184238 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dave'
    16:12:13.185240 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.187239 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'great'
    16:12:13.188238 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:12:13.190239 line       569         for _key in self.keyword_counts:
    16:12:13.190239 line       574         for _set in self.data[self.node_column]:
    New var:....... _set = {'good_week', 'dog', 'like'}
    16:12:13.191235 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    New var:....... combinations = <itertools.combinations object at 0x0000027820603B30>
    16:12:13.192237 line       576             for edge in combinations:
    New var:....... edge = ('good_week', 'dog')
    16:12:13.194236 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.197238 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.198234 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'like')
    16:12:13.199235 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.200236 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.201238 line       576             for edge in combinations:
    Modified var:.. edge = ('dog', 'like')
    16:12:13.202239 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.203235 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.204238 line       576             for edge in combinations:
    16:12:13.205239 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'fantastic', 'wolf'}
    16:12:13.205239 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781FE525E0>
    16:12:13.207239 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'fantastic')
    16:12:13.209240 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.210234 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.211239 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'wolf')
    16:12:13.211239 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.213238 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.213238 line       576             for edge in combinations:
    Modified var:.. edge = ('fantastic', 'wolf')
    16:12:13.214240 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.216241 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.216241 line       576             for edge in combinations:
    16:12:13.217238 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'great', 'cat'}
    16:12:13.217238 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781ECCEA40>
    16:12:13.219238 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'great')
    16:12:13.220239 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.221238 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.221238 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'cat')
    16:12:13.222239 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.223238 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.224238 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'cat')
    16:12:13.224238 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.225239 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.226238 line       576             for edge in combinations:
    16:12:13.227239 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'amazing', 'feline'}
    16:12:13.227239 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781FE525E0>
    16:12:13.229237 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'amazing')
    16:12:13.230233 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.231238 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.232237 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'feline')
    16:12:13.233232 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.234239 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.235233 line       576             for edge in combinations:
    Modified var:.. edge = ('amazing', 'feline')
    16:12:13.235233 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.237256 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.238256 line       576             for edge in combinations:
    16:12:13.239233 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'not', 'bad_week', 'great', 'food'}
    16:12:13.240239 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781ECCEF90>
    16:12:13.242239 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'bad_week')
    16:12:13.243234 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.245235 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.245235 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'great')
    16:12:13.246235 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.248239 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.249241 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'food')
    16:12:13.250236 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.252237 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.253237 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'great')
    16:12:13.255234 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.256234 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.257237 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'food')
    16:12:13.257237 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.258237 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.259232 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'food')
    16:12:13.260234 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.262232 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.262232 line       576             for edge in combinations:
    16:12:13.263231 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'sandwich', 'like', 'not'}
    16:12:13.264234 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781FE525E0>
    16:12:13.265232 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'sandwich')
    16:12:13.266232 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.268230 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.268230 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'like')
    16:12:13.269233 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.270233 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.271233 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'not')
    16:12:13.272236 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.273233 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    New var:....... edge_count = 2
    16:12:13.278232 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    16:12:13.280237 line       581                     continue
    16:12:13.281236 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'like')
    16:12:13.282236 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.283232 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.284236 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'not')
    16:12:13.285250 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.287233 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.288239 line       576             for edge in combinations:
    Modified var:.. edge = ('like', 'not')
    16:12:13.289233 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.290236 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.291234 line       576             for edge in combinations:
    16:12:13.292236 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'bad_week', 'ok', 'drink', 'dave'}
    16:12:13.293231 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x0000027820603B30>
    16:12:13.295233 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'ok')
    16:12:13.297232 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.298232 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.299233 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'drink')
    16:12:13.300231 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.302234 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.304239 line       576             for edge in combinations:
    Modified var:.. edge = ('bad_week', 'dave')
    16:12:13.305240 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.307235 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.308236 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'drink')
    16:12:13.309234 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.311230 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.312229 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'dave')
    16:12:13.313233 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.315236 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.316232 line       576             for edge in combinations:
    Modified var:.. edge = ('drink', 'dave')
    16:12:13.317232 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.318230 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.319232 line       576             for edge in combinations:
    16:12:13.320233 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'good_week', 'pretty', 'love', 'cat'}
    16:12:13.320233 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781ECCEF90>
    16:12:13.322229 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'pretty')
    16:12:13.324235 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.325229 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.326234 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'love')
    16:12:13.327231 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.330228 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.331228 line       576             for edge in combinations:
    Modified var:.. edge = ('good_week', 'cat')
    16:12:13.331228 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.333230 line       579                     edge_count = self.edges[edge]['edge_count'] + 1 # increase the edge count by 1
    16:12:13.333230 line       580                     self.edges[edge]['edge_count'] = edge_count # then assign the increased edge count
    16:12:13.334232 line       581                     continue
    16:12:13.335230 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'love')
    16:12:13.335230 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.337228 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.337228 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'cat')
    16:12:13.338227 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.340232 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.341237 line       576             for edge in combinations:
    Modified var:.. edge = ('love', 'cat')
    16:12:13.341237 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:12:13.342231 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:12:13.343228 line       576             for edge in combinations:
    16:12:13.344229 line       574         for _set in self.data[self.node_column]:
    16:12:13.345229 line       585         for _column in self.attributes:
    New var:....... _column = 'comment'
    16:12:13.346229 line       586             self.add_graph_attribute(_column, self.attributes[_column])
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781FF83AC0>
        Starting var:.. column = 'comment'
        Starting var:.. attribute_name = 'Customer Comments'
        16:12:13.348229 call       551     def add_graph_attribute(self,column,attribute_name):
        16:12:13.351228 line       552         for _index in self.data.index:
        New var:....... _index = 0
        16:12:13.352229 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        New var:....... entry = 'I really liked the dogs'
        16:12:13.354228 line       554             nodes = self.data.loc[_index,self.node_column]
        New var:....... nodes = {'good_week', 'dog', 'like'}
        16:12:13.357228 line       557             for node in nodes:
        New var:....... node = 'good_week'
        16:12:13.358227 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.362227 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.362227 line       557             for node in nodes:
        Modified var:.. node = 'dog'
        16:12:13.363228 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.365227 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.366228 line       557             for node in nodes:
        Modified var:.. node = 'like'
        16:12:13.367229 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.369228 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.369228 line       557             for node in nodes:
        16:12:13.370229 line       552         for _index in self.data.index:
        Modified var:.. _index = 1
        16:12:13.372235 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'wolves were fantastic'
        16:12:13.374230 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'fantastic', 'wolf'}
        16:12:13.376229 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        16:12:13.378229 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.380230 line       559                     self.nodes[node][attribute_name].append(entry)
        16:12:13.381227 line       557             for node in nodes:
        Modified var:.. node = 'fantastic'
        16:12:13.382228 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.385227 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.386227 line       557             for node in nodes:
        Modified var:.. node = 'wolf'
        16:12:13.387226 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.390232 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.391229 line       557             for node in nodes:
        16:12:13.392229 line       552         for _index in self.data.index:
        Modified var:.. _index = 2
        16:12:13.393226 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'cats were great'
        16:12:13.395227 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'great', 'cat'}
        16:12:13.396227 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        16:12:13.398227 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.399227 line       559                     self.nodes[node][attribute_name].append(entry)
        16:12:13.399227 line       557             for node in nodes:
        Modified var:.. node = 'great'
        16:12:13.400227 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.401226 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.402227 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        16:12:13.403224 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.405226 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.405226 line       557             for node in nodes:
        16:12:13.406226 line       552         for _index in self.data.index:
        Modified var:.. _index = 3
        16:12:13.407225 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'what amazing felines'
        16:12:13.408224 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'amazing', 'feline'}
        16:12:13.410226 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        16:12:13.411226 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.413226 line       559                     self.nodes[node][attribute_name].append(entry)
        16:12:13.414226 line       557             for node in nodes:
        Modified var:.. node = 'amazing'
        16:12:13.415225 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.418224 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.419227 line       557             for node in nodes:
        Modified var:.. node = 'feline'
        16:12:13.420227 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.422224 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.422224 line       557             for node in nodes:
        16:12:13.423225 line       552         for _index in self.data.index:
        Modified var:.. _index = 4
        16:12:13.424226 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'the food was not great'
        16:12:13.426229 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'not', 'bad_week', 'great', 'food'}
        16:12:13.428225 line       557             for node in nodes:
        Modified var:.. node = 'not'
        16:12:13.429238 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.430224 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.431226 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        16:12:13.432225 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.433224 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.434225 line       557             for node in nodes:
        Modified var:.. node = 'great'
        16:12:13.435226 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.437227 line       559                     self.nodes[node][attribute_name].append(entry)
        16:12:13.438240 line       557             for node in nodes:
        Modified var:.. node = 'food'
        16:12:13.439231 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.441228 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.442227 line       557             for node in nodes:
        16:12:13.443226 line       552         for _index in self.data.index:
        Modified var:.. _index = 5
        16:12:13.444227 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I didn't like the sandwiches"
        16:12:13.446226 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'sandwich', 'like', 'not'}
        16:12:13.448225 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        16:12:13.450227 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.452223 line       559                     self.nodes[node][attribute_name].append(entry)
        16:12:13.453225 line       557             for node in nodes:
        Modified var:.. node = 'sandwich'
        16:12:13.454225 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.456224 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.456224 line       557             for node in nodes:
        Modified var:.. node = 'like'
        16:12:13.457227 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.459224 line       559                     self.nodes[node][attribute_name].append(entry)
        16:12:13.460230 line       557             for node in nodes:
        Modified var:.. node = 'not'
        16:12:13.461228 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.464238 line       559                     self.nodes[node][attribute_name].append(entry)
        16:12:13.464238 line       557             for node in nodes:
        16:12:13.465222 line       552         for _index in self.data.index:
        Modified var:.. _index = 6
        16:12:13.466221 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'Dave said drinks were OK'
        16:12:13.467220 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'bad_week', 'ok', 'drink', 'dave'}
        16:12:13.469224 line       557             for node in nodes:
        Modified var:.. node = 'bad_week'
        16:12:13.470223 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.471224 line       559                     self.nodes[node][attribute_name].append(entry)
        16:12:13.472221 line       557             for node in nodes:
        Modified var:.. node = 'ok'
        16:12:13.473223 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.474222 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.475224 line       557             for node in nodes:
        Modified var:.. node = 'drink'
        16:12:13.476223 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.478224 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.478224 line       557             for node in nodes:
        Modified var:.. node = 'dave'
        16:12:13.479223 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.480221 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.481223 line       557             for node in nodes:
        16:12:13.482223 line       552         for _index in self.data.index:
        Modified var:.. _index = 7
        16:12:13.483223 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I saw a few cats when I was there and that was pretty amazing, I do love cats that's why!"
        16:12:13.484222 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'good_week', 'pretty', 'love', 'cat'}
        16:12:13.486224 line       557             for node in nodes:
        Modified var:.. node = 'good_week'
        16:12:13.488223 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.490227 line       559                     self.nodes[node][attribute_name].append(entry)
        16:12:13.491224 line       557             for node in nodes:
        Modified var:.. node = 'pretty'
        16:12:13.492224 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.493222 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.494222 line       557             for node in nodes:
        Modified var:.. node = 'love'
        16:12:13.495222 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.496220 line       562                     self.nodes[node][attribute_name] = [entry]
        16:12:13.497221 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        16:12:13.498223 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:12:13.499223 line       559                     self.nodes[node][attribute_name].append(entry)
        16:12:13.500221 line       557             for node in nodes:
        16:12:13.501220 line       552         for _index in self.data.index:
        16:12:13.502220 return     552         for _index in self.data.index:
        Return value:.. None
        Elapsed time: 00:00:00.156989
    16:12:13.505220 line       585         for _column in self.attributes:
    16:12:13.506223 return     585         for _column in self.attributes:
    Return value:.. None
    Elapsed time: 00:00:00.441982
16:12:13.509223 line       521         if nlp_object != None:
16:12:13.522222 line       522             self.add_spacy_language_model(nlp_object)
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781FF83AC0>
    Starting var:.. nlp = <spacy.lang.en.English object at 0x000002781EFECC70>
    16:12:13.534219 call       526     def add_spacy_language_model(self,nlp):
    16:12:13.536220 line       527         self.nlp_object = nlp
    16:12:13.537220 return     527         self.nlp_object = nlp
    Return value:.. None
    Elapsed time: 00:00:00.004001
16:12:13.539220 return     522             self.add_spacy_language_model(nlp_object)
Return value:.. None
Elapsed time: 00:00:00.577977
Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781FB77700>
Starting var:.. data =    person  good_week  \0  family          1   1 ... 7   good_week   {good_week, pretty, love, cat}  
Starting var:.. node_column = 'keywords'
Starting var:.. attributes = {'comment': 'Customer Comments'}
Starting var:.. nlp_object = <spacy.lang.en.English object at 0x000002781EFECC70>
Starting var:.. args = ()
Starting var:.. kwargs = {}
Starting var:.. __class__ = <class 'nlp_toolkit.KeywordGraph'>
16:18:19.659691 call       515     def __init__(self,data,node_column,attributes:dict, nlp_object = None, *args, **kwargs):
16:18:19.677257 line       516         super().__init__(*args, **kwargs)
16:18:19.693836 line       517         self.data = data
16:18:19.710774 line       518         self.node_column = node_column
16:18:19.722774 line       519         self.attributes = attributes
16:18:19.735770 line       520         self.build_graph()
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781FB77700>
    16:18:19.742769 call       564     def build_graph(self):
    16:18:19.743770 line       567         self.keyword_counts = self._keyword_counts() #get keyword counts of keyword : count
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781FB77700>
        16:18:19.744770 call       529     def _keyword_counts(self):
        16:18:19.745770 line       531         self.data[self.node_column] = self.data[self.node_column].apply(set)
        16:18:19.747772 line       532         def initialise_keyword_di(ser):
        New var:....... initialise_keyword_di = <function KeywordGraph._keyword_counts.<locals>.initialise_keyword_di at 0x000002782A872160>
        16:18:19.748772 line       541         def update_keyword_dict(keyword_d, set_of_keywords): #updates value in dictionary
        New var:....... update_keyword_dict = <function KeywordGraph._keyword_counts.<locals>.update_keyword_dict at 0x000002782A8725E0>
        16:18:19.750771 line       546         keyword_d = initialise_keyword_di(self.data[self.node_column])
        New var:....... keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 0, '...0, 'dave': 0, 'drink': 0, 'love': 0, 'feline': 0}
        16:18:19.752771 line       547         for keyword_set in self.data[self.node_column]:
        New var:....... keyword_set = {'dog', 'like'}
        16:18:19.754769 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 0, 'cat': 0, 'dog': 1, '...0, 'dave': 0, 'drink': 0, 'love': 0, 'feline': 0}
        16:18:19.755770 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'fantastic', 'wolf'}
        16:18:19.757772 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 0, 'dog': 1, '...0, 'dave': 0, 'drink': 0, 'love': 0, 'feline': 0}
        16:18:19.758771 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'great', 'cat'}
        16:18:19.759771 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...0, 'dave': 0, 'drink': 0, 'love': 0, 'feline': 0}
        16:18:19.760770 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'amazing', 'feline'}
        16:18:19.762770 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 0, 'wolf': 1, 'cat': 1, 'dog': 1, '...1, 'dave': 0, 'drink': 0, 'love': 0, 'feline': 1}
        16:18:19.763769 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'not', 'great', 'food'}
        16:18:19.764769 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        16:18:19.765768 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'sandwich', 'like', 'not'}
        16:18:19.766769 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...1, 'dave': 0, 'drink': 0, 'love': 0, 'feline': 1}
        16:18:19.767769 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'ok', 'drink', 'dave'}
        16:18:19.768769 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 1, 'dog': 1, '...1, 'dave': 1, 'drink': 1, 'love': 0, 'feline': 1}
        16:18:19.769769 line       547         for keyword_set in self.data[self.node_column]:
        Modified var:.. keyword_set = {'pretty', 'love', 'cat'}
        16:18:19.772775 line       548             keyword_d = update_keyword_dict(keyword_d, keyword_set)
        Modified var:.. keyword_d = {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...1, 'dave': 1, 'drink': 1, 'love': 1, 'feline': 1}
        16:18:19.774771 line       547         for keyword_set in self.data[self.node_column]:
        16:18:19.776768 line       549         return keyword_d
        16:18:19.776768 return     549         return keyword_d
        Return value:.. {'sandwich': 1, 'wolf': 1, 'cat': 2, 'dog': 1, '...1, 'dave': 1, 'drink': 1, 'love': 1, 'feline': 1}
        Elapsed time: 00:00:00.033999
    16:18:19.778769 line       569         for _key in self.keyword_counts:
    New var:....... _key = 'sandwich'
    16:18:19.779771 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.780771 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'wolf'
    16:18:19.781770 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.782770 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'cat'
    16:18:19.784771 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.786772 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dog'
    16:18:19.786772 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.788771 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'ok'
    16:18:19.789773 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.790771 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'great'
    16:18:19.791772 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.792776 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'pretty'
    16:18:19.793773 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.794771 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'not'
    16:18:19.795770 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.796771 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'fantastic'
    16:18:19.797770 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.798771 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'food'
    16:18:19.799772 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.800772 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'like'
    16:18:19.800772 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.802771 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'amazing'
    16:18:19.802771 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.803770 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'dave'
    16:18:19.804770 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.805770 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'drink'
    16:18:19.806772 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.807769 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'love'
    16:18:19.808771 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.809772 line       569         for _key in self.keyword_counts:
    Modified var:.. _key = 'feline'
    16:18:19.809772 line       570             self.add_node(_key, node_count = self.keyword_counts[_key]) #add keyword counts to the graph
    16:18:19.811771 line       569         for _key in self.keyword_counts:
    16:18:19.811771 line       574         for _set in self.data[self.node_column]:
    New var:....... _set = {'dog', 'like'}
    16:18:19.812771 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    New var:....... combinations = <itertools.combinations object at 0x000002781FC73220>
    16:18:19.814775 line       576             for edge in combinations:
    New var:....... edge = ('dog', 'like')
    16:18:19.815771 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.816771 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.817771 line       576             for edge in combinations:
    16:18:19.818772 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'fantastic', 'wolf'}
    16:18:19.819781 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781FEA5540>
    16:18:19.820769 line       576             for edge in combinations:
    Modified var:.. edge = ('fantastic', 'wolf')
    16:18:19.821773 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.823774 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.824770 line       576             for edge in combinations:
    16:18:19.824770 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'great', 'cat'}
    16:18:19.825772 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781FC73220>
    16:18:19.826771 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'cat')
    16:18:19.827770 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.828771 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.829770 line       576             for edge in combinations:
    16:18:19.829770 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'amazing', 'feline'}
    16:18:19.830771 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781FEA5540>
    16:18:19.831771 line       576             for edge in combinations:
    Modified var:.. edge = ('amazing', 'feline')
    16:18:19.832771 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.833770 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.834771 line       576             for edge in combinations:
    16:18:19.834771 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'not', 'great', 'food'}
    16:18:19.835770 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781FC73220>
    16:18:19.836771 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'great')
    16:18:19.837773 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.838773 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.839773 line       576             for edge in combinations:
    Modified var:.. edge = ('not', 'food')
    16:18:19.840773 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.841773 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.841773 line       576             for edge in combinations:
    Modified var:.. edge = ('great', 'food')
    16:18:19.842768 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.843774 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.844773 line       576             for edge in combinations:
    16:18:19.845778 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'sandwich', 'like', 'not'}
    16:18:19.846773 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781FEA5540>
    16:18:19.848772 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'like')
    16:18:19.849773 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.850792 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.851782 line       576             for edge in combinations:
    Modified var:.. edge = ('sandwich', 'not')
    16:18:19.852773 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.853772 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.854775 line       576             for edge in combinations:
    Modified var:.. edge = ('like', 'not')
    16:18:19.855777 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.856772 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.857793 line       576             for edge in combinations:
    16:18:19.858776 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'ok', 'drink', 'dave'}
    16:18:19.860774 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781FC73220>
    16:18:19.861771 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'drink')
    16:18:19.862771 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.864771 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.864771 line       576             for edge in combinations:
    Modified var:.. edge = ('ok', 'dave')
    16:18:19.865848 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.866789 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.867787 line       576             for edge in combinations:
    Modified var:.. edge = ('drink', 'dave')
    16:18:19.868789 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.869788 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.870789 line       576             for edge in combinations:
    16:18:19.870789 line       574         for _set in self.data[self.node_column]:
    Modified var:.. _set = {'pretty', 'love', 'cat'}
    16:18:19.871788 line       575             combinations = itertools.combinations(_set,2) #create all possible edges in each keyword set
    Modified var:.. combinations = <itertools.combinations object at 0x000002781FEA5540>
    16:18:19.872788 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'love')
    16:18:19.874787 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.875783 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.877784 line       576             for edge in combinations:
    Modified var:.. edge = ('pretty', 'cat')
    16:18:19.878784 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.880829 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.880829 line       576             for edge in combinations:
    Modified var:.. edge = ('love', 'cat')
    16:18:19.881782 line       578                 if (self.has_edge(edge[0],edge[1])) | (self.has_edge(edge[1],edge[0])): #if it already has an edge like this
    16:18:19.883788 line       583                     self.add_edge(edge[0],edge[1],edge_count= 1,edge_type = 'keyword') #assign an edge count as 1
    16:18:19.884783 line       576             for edge in combinations:
    16:18:19.885782 line       574         for _set in self.data[self.node_column]:
    16:18:19.886782 line       585         for _column in self.attributes:
    New var:....... _column = 'comment'
    16:18:19.887784 line       586             self.add_graph_attribute(_column, self.attributes[_column])
        Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781FB77700>
        Starting var:.. column = 'comment'
        Starting var:.. attribute_name = 'Customer Comments'
        16:18:19.889784 call       551     def add_graph_attribute(self,column,attribute_name):
        16:18:19.891780 line       552         for _index in self.data.index:
        New var:....... _index = 0
        16:18:19.892780 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        New var:....... entry = 'I really liked the dogs'
        16:18:19.894782 line       554             nodes = self.data.loc[_index,self.node_column]
        New var:....... nodes = {'dog', 'like'}
        16:18:19.895783 line       557             for node in nodes:
        New var:....... node = 'dog'
        16:18:19.896779 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.898779 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.898779 line       557             for node in nodes:
        Modified var:.. node = 'like'
        16:18:19.899781 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.901782 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.902781 line       557             for node in nodes:
        16:18:19.902781 line       552         for _index in self.data.index:
        Modified var:.. _index = 1
        16:18:19.903779 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'wolves were fantastic'
        16:18:19.904782 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'fantastic', 'wolf'}
        16:18:19.906781 line       557             for node in nodes:
        Modified var:.. node = 'fantastic'
        16:18:19.907778 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.908785 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.909778 line       557             for node in nodes:
        Modified var:.. node = 'wolf'
        16:18:19.910778 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.911784 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.913777 line       557             for node in nodes:
        16:18:19.913777 line       552         for _index in self.data.index:
        Modified var:.. _index = 2
        16:18:19.914777 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'cats were great'
        16:18:19.916781 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'great', 'cat'}
        16:18:19.917780 line       557             for node in nodes:
        Modified var:.. node = 'great'
        16:18:19.919779 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.920780 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.921779 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        16:18:19.922781 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.923776 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.924774 line       557             for node in nodes:
        16:18:19.925777 line       552         for _index in self.data.index:
        Modified var:.. _index = 3
        16:18:19.926781 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'what amazing felines'
        16:18:19.928778 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'amazing', 'feline'}
        16:18:19.930775 line       557             for node in nodes:
        Modified var:.. node = 'amazing'
        16:18:19.931778 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.933774 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.934774 line       557             for node in nodes:
        Modified var:.. node = 'feline'
        16:18:19.934774 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.936772 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.936772 line       557             for node in nodes:
        16:18:19.937776 line       552         for _index in self.data.index:
        Modified var:.. _index = 4
        16:18:19.937776 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'the food was not great'
        16:18:19.939776 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'not', 'great', 'food'}
        16:18:19.941773 line       557             for node in nodes:
        Modified var:.. node = 'not'
        16:18:19.942775 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.944785 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.944785 line       557             for node in nodes:
        Modified var:.. node = 'great'
        16:18:19.945779 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.946772 line       559                     self.nodes[node][attribute_name].append(entry)
        16:18:19.947772 line       557             for node in nodes:
        Modified var:.. node = 'food'
        16:18:19.948777 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.949773 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.950772 line       557             for node in nodes:
        16:18:19.951772 line       552         for _index in self.data.index:
        Modified var:.. _index = 5
        16:18:19.951772 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I didn't like the sandwiches"
        16:18:19.952771 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'sandwich', 'like', 'not'}
        16:18:19.954773 line       557             for node in nodes:
        Modified var:.. node = 'sandwich'
        16:18:19.956798 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.957771 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.958769 line       557             for node in nodes:
        Modified var:.. node = 'like'
        16:18:19.958769 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.960771 line       559                     self.nodes[node][attribute_name].append(entry)
        16:18:19.961769 line       557             for node in nodes:
        Modified var:.. node = 'not'
        16:18:19.961769 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.963769 line       559                     self.nodes[node][attribute_name].append(entry)
        16:18:19.964772 line       557             for node in nodes:
        16:18:19.964772 line       552         for _index in self.data.index:
        Modified var:.. _index = 6
        16:18:19.966768 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = 'Dave said drinks were OK'
        16:18:19.967771 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'ok', 'drink', 'dave'}
        16:18:19.968767 line       557             for node in nodes:
        Modified var:.. node = 'ok'
        16:18:19.970767 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.971769 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.972768 line       557             for node in nodes:
        Modified var:.. node = 'drink'
        16:18:19.972768 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.974769 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.975767 line       557             for node in nodes:
        Modified var:.. node = 'dave'
        16:18:19.976766 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.977767 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.978767 line       557             for node in nodes:
        16:18:19.979769 line       552         for _index in self.data.index:
        Modified var:.. _index = 7
        16:18:19.980769 line       553             entry = self.data.loc[_index,column].replace("'","\'")
        Modified var:.. entry = "I saw a few cats when I was there and that was pretty amazing, I do love cats that's why!"
        16:18:19.981766 line       554             nodes = self.data.loc[_index,self.node_column]
        Modified var:.. nodes = {'pretty', 'love', 'cat'}
        16:18:19.983765 line       557             for node in nodes:
        Modified var:.. node = 'pretty'
        16:18:19.984765 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.986767 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.987764 line       557             for node in nodes:
        Modified var:.. node = 'love'
        16:18:19.988764 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.990765 line       562                     self.nodes[node][attribute_name] = [entry]
        16:18:19.991772 line       557             for node in nodes:
        Modified var:.. node = 'cat'
        16:18:19.992769 line       558                 if attribute_name in self.nodes[node]: # there is already another entry here in this attribute
        16:18:19.995766 line       559                     self.nodes[node][attribute_name].append(entry)
        16:18:19.996764 line       557             for node in nodes:
        16:18:19.997763 line       552         for _index in self.data.index:
        16:18:19.997763 return     552         for _index in self.data.index:
        Return value:.. None
        Elapsed time: 00:00:00.109979
    16:18:20.000764 line       585         for _column in self.attributes:
    16:18:20.001765 return     585         for _column in self.attributes:
    Return value:.. None
    Elapsed time: 00:00:00.260994
16:18:20.003763 line       521         if nlp_object != None:
16:18:20.018765 line       522             self.add_spacy_language_model(nlp_object)
    Starting var:.. self = <nlp_toolkit.KeywordGraph object at 0x000002781FB77700>
    Starting var:.. nlp = <spacy.lang.en.English object at 0x000002781EFECC70>
    16:18:20.027759 call       526     def add_spacy_language_model(self,nlp):
    16:18:20.028759 line       527         self.nlp_object = nlp
    16:18:20.029758 return     527         self.nlp_object = nlp
    Return value:.. None
    Elapsed time: 00:00:00.003998
16:18:20.031758 return     522             self.add_spacy_language_model(nlp_object)
Return value:.. None
Elapsed time: 00:00:00.381064
